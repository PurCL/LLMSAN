{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE36_Absolute_Path_Traversal__connect_tcp_14.java\nLabel Definition File: CWE36_Absolute_Path_Traversal.label.xml\nTemplate File: sources-sink-14.tmpl.java\n*/\n/*\n* @description\n* CWE: 36 Absolute Path Traversal\n* BadSource: connect_tcp Read data using an outbound tcp connection\n* GoodSource: A hardcoded string\n* BadSink: readFile read line from file from disk\n* Flow Variant: 14 Control flow: if(IO.staticFive==5) and if(IO.staticFive!=5)\n*\n* */\n\npackage testcases.CWE36_Absolute_Path_Traversal;\n\nimport testcasesupport.*;\n\nimport java.io.*;\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\n\nimport java.util.logging.Level;\n\n\npublic class CWE36_Absolute_Path_Traversal__connect_tcp_14 extends AbstractTestCase\n{\n    /* uses badsource and badsink */\n    public void bad() throws Throwable\n    {\n        String data;\n        if (IO.staticFive == 5)\n        {\n            data = \"\"; /* Initialize data */\n            /* Read data using an outbound tcp connection */\n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try\n                {\n                    /* Read data using an outbound tcp connection */\n                    socket = new Socket(\"host.example.org\", 39544);\n                    /* read input from socket */\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    /* POTENTIAL FLAW: Read data using an outbound tcp connection */\n                    data = readerBuffered.readLine();\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* clean up stream reading objects */\n                    try\n                    {\n                        if (readerBuffered != null)\n                        {\n                            readerBuffered.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (readerInputStream != null)\n                        {\n                            readerInputStream.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n\n                    /* clean up socket objects */\n                    try\n                    {\n                        if (socket != null)\n                        {\n                            socket.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n                    }\n                }\n            }\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        /* POTENTIAL FLAW: unvalidated or sandboxed value */\n        if (data != null)\n        {\n            File file = new File(data);\n            FileInputStream streamFileInputSink = null;\n            InputStreamReader readerInputStreamSink = null;\n            BufferedReader readerBufferdSink = null;\n            if (file.exists() && file.isFile())\n            {\n                try\n                {\n                    streamFileInputSink = new FileInputStream(file);\n                    readerInputStreamSink = new InputStreamReader(streamFileInputSink, \"UTF-8\");\n                    readerBufferdSink = new BufferedReader(readerInputStreamSink);\n                    IO.writeLine(readerBufferdSink.readLine());\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* Close stream reading objects */\n                    try\n                    {\n                        if (readerBufferdSink != null)\n                        {\n                            readerBufferdSink.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (readerInputStreamSink != null)\n                        {\n                            readerInputStreamSink.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (streamFileInputSink != null)\n                        {\n                            streamFileInputSink.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing FileInputStream\", exceptIO);\n                    }\n                }\n            }\n        }\n\n    }\n\n    /* goodG2B1() - use goodsource and badsink by changing IO.staticFive==5 to IO.staticFive!=5 */\n    private void goodG2B1() throws Throwable\n    {\n        String data;\n        if (IO.staticFive != 5)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        else\n        {\n\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n\n        }\n\n        /* POTENTIAL FLAW: unvalidated or sandboxed value */\n        if (data != null)\n        {\n            File file = new File(data);\n            FileInputStream streamFileInputSink = null;\n            InputStreamReader readerInputStreamSink = null;\n            BufferedReader readerBufferdSink = null;\n            if (file.exists() && file.isFile())\n            {\n                try\n                {\n                    streamFileInputSink = new FileInputStream(file);\n                    readerInputStreamSink = new InputStreamReader(streamFileInputSink, \"UTF-8\");\n                    readerBufferdSink = new BufferedReader(readerInputStreamSink);\n                    IO.writeLine(readerBufferdSink.readLine());\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* Close stream reading objects */\n                    try\n                    {\n                        if (readerBufferdSink != null)\n                        {\n                            readerBufferdSink.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (readerInputStreamSink != null)\n                        {\n                            readerInputStreamSink.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (streamFileInputSink != null)\n                        {\n                            streamFileInputSink.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing FileInputStream\", exceptIO);\n                    }\n                }\n            }\n        }\n\n    }\n\n    /* goodG2B2() - use goodsource and badsink by reversing statements in if */\n    private void goodG2B2() throws Throwable\n    {\n        String data;\n        if (IO.staticFive == 5)\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        /* POTENTIAL FLAW: unvalidated or sandboxed value */\n        if (data != null)\n        {\n            File file = new File(data);\n            FileInputStream streamFileInputSink = null;\n            InputStreamReader readerInputStreamSink = null;\n            BufferedReader readerBufferdSink = null;\n            if (file.exists() && file.isFile())\n            {\n                try\n                {\n                    streamFileInputSink = new FileInputStream(file);\n                    readerInputStreamSink = new InputStreamReader(streamFileInputSink, \"UTF-8\");\n                    readerBufferdSink = new BufferedReader(readerInputStreamSink);\n                    IO.writeLine(readerBufferdSink.readLine());\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* Close stream reading objects */\n                    try\n                    {\n                        if (readerBufferdSink != null)\n                        {\n                            readerBufferdSink.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (readerInputStreamSink != null)\n                        {\n                            readerInputStreamSink.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (streamFileInputSink != null)\n                        {\n                            streamFileInputSink.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing FileInputStream\", exceptIO);\n                    }\n                }\n            }\n        }\n\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B1();\n        goodG2B2();\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE36_Absolute_Path_Traversal;\n17  \n18  import testcasesupport.*;\n19  \n20  import java.io.*;\n21  import javax.servlet.http.*;\n22  \n23  import java.io.BufferedReader;\n24  import java.io.InputStreamReader;\n25  import java.io.IOException;\n26  import java.net.Socket;\n27  \n28  import java.util.logging.Level;\n29  \n30  \n31  public class CWE36_Absolute_Path_Traversal__connect_tcp_14 extends AbstractTestCase\n32  {\n33      \n34      public void hoo() throws Throwable\n35      {\n36          String data;\n37          if (IO.staticFive == 5)\n38          {\n39              data = \"\"; \n40              \n41              {\n42                  Socket socket = null;\n43                  BufferedReader readerBuffered = null;\n44                  InputStreamReader readerInputStream = null;\n45                  try\n46                  {\n47                      \n48                      socket = new Socket(\"host.example.org\", 39544);\n49                      \n50                      readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n51                      readerBuffered = new BufferedReader(readerInputStream);\n52                      \n53                      data = readerBuffered.readLine();\n54                  }\n55                  catch (IOException exceptIO)\n56                  {\n57                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n58                  }\n59                  finally\n60                  {\n61                      \n62                      try\n63                      {\n64                          if (readerBuffered != null)\n65                          {\n66                              readerBuffered.close();\n67                          }\n68                      }\n69                      catch (IOException exceptIO)\n70                      {\n71                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n72                      }\n73  \n74                      try\n75                      {\n76                          if (readerInputStream != null)\n77                          {\n78                              readerInputStream.close();\n79                          }\n80                      }\n81                      catch (IOException exceptIO)\n82                      {\n83                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n84                      }\n85  \n86                      \n87                      try\n88                      {\n89                          if (socket != null)\n90                          {\n91                              socket.close();\n92                          }\n93                      }\n94                      catch (IOException exceptIO)\n95                      {\n96                          IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n97                      }\n98                  }\n99              }\n100          }\n101          else\n102          {\n103              \n104  \n105              data = null;\n106          }\n107  \n108          \n109          if (data != null)\n110          {\n111              File file = new File(data);\n112              FileInputStream streamFileInputSink = null;\n113              InputStreamReader readerInputStreamSink = null;\n114              BufferedReader readerBufferdSink = null;\n115              if (file.exists() && file.isFile())\n116              {\n117                  try\n118                  {\n119                      streamFileInputSink = new FileInputStream(file);\n120                      readerInputStreamSink = new InputStreamReader(streamFileInputSink, \"UTF-8\");\n121                      readerBufferdSink = new BufferedReader(readerInputStreamSink);\n122                      IO.writeLine(readerBufferdSink.readLine());\n123                  }\n124                  catch (IOException exceptIO)\n125                  {\n126                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n127                  }\n128                  finally\n129                  {\n130                      \n131                      try\n132                      {\n133                          if (readerBufferdSink != null)\n134                          {\n135                              readerBufferdSink.close();\n136                          }\n137                      }\n138                      catch (IOException exceptIO)\n139                      {\n140                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n141                      }\n142  \n143                      try\n144                      {\n145                          if (readerInputStreamSink != null)\n146                          {\n147                              readerInputStreamSink.close();\n148                          }\n149                      }\n150                      catch (IOException exceptIO)\n151                      {\n152                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n153                      }\n154  \n155                      try\n156                      {\n157                          if (streamFileInputSink != null)\n158                          {\n159                              streamFileInputSink.close();\n160                          }\n161                      }\n162                      catch (IOException exceptIO)\n163                      {\n164                          IO.logger.log(Level.WARNING, \"Error closing FileInputStream\", exceptIO);\n165                      }\n166                  }\n167              }\n168          }\n169  \n170      }\n171  \n172      \n173      private void fooxx1() throws Throwable\n174      {\n175          String data;\n176          if (IO.staticFive != 5)\n177          {\n178              \n179  \n180              data = null;\n181          }\n182          else\n183          {\n184  \n185              \n186              data = \"foo\";\n187  \n188          }\n189  \n190          \n191          if (data != null)\n192          {\n193              File file = new File(data);\n194              FileInputStream streamFileInputSink = null;\n195              InputStreamReader readerInputStreamSink = null;\n196              BufferedReader readerBufferdSink = null;\n197              if (file.exists() && file.isFile())\n198              {\n199                  try\n200                  {\n201                      streamFileInputSink = new FileInputStream(file);\n202                      readerInputStreamSink = new InputStreamReader(streamFileInputSink, \"UTF-8\");\n203                      readerBufferdSink = new BufferedReader(readerInputStreamSink);\n204                      IO.writeLine(readerBufferdSink.readLine());\n205                  }\n206                  catch (IOException exceptIO)\n207                  {\n208                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n209                  }\n210                  finally\n211                  {\n212                      \n213                      try\n214                      {\n215                          if (readerBufferdSink != null)\n216                          {\n217                              readerBufferdSink.close();\n218                          }\n219                      }\n220                      catch (IOException exceptIO)\n221                      {\n222                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n223                      }\n224  \n225                      try\n226                      {\n227                          if (readerInputStreamSink != null)\n228                          {\n229                              readerInputStreamSink.close();\n230                          }\n231                      }\n232                      catch (IOException exceptIO)\n233                      {\n234                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n235                      }\n236  \n237                      try\n238                      {\n239                          if (streamFileInputSink != null)\n240                          {\n241                              streamFileInputSink.close();\n242                          }\n243                      }\n244                      catch (IOException exceptIO)\n245                      {\n246                          IO.logger.log(Level.WARNING, \"Error closing FileInputStream\", exceptIO);\n247                      }\n248                  }\n249              }\n250          }\n251  \n252      }\n253  \n254      \n255      private void fooxx2() throws Throwable\n256      {\n257          String data;\n258          if (IO.staticFive == 5)\n259          {\n260              \n261              data = \"foo\";\n262          }\n263          else\n264          {\n265              \n266  \n267              data = null;\n268          }\n269  \n270          \n271          if (data != null)\n272          {\n273              File file = new File(data);\n274              FileInputStream streamFileInputSink = null;\n275              InputStreamReader readerInputStreamSink = null;\n276              BufferedReader readerBufferdSink = null;\n277              if (file.exists() && file.isFile())\n278              {\n279                  try\n280                  {\n281                      streamFileInputSink = new FileInputStream(file);\n282                      readerInputStreamSink = new InputStreamReader(streamFileInputSink, \"UTF-8\");\n283                      readerBufferdSink = new BufferedReader(readerInputStreamSink);\n284                      IO.writeLine(readerBufferdSink.readLine());\n285                  }\n286                  catch (IOException exceptIO)\n287                  {\n288                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n289                  }\n290                  finally\n291                  {\n292                      \n293                      try\n294                      {\n295                          if (readerBufferdSink != null)\n296                          {\n297                              readerBufferdSink.close();\n298                          }\n299                      }\n300                      catch (IOException exceptIO)\n301                      {\n302                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n303                      }\n304  \n305                      try\n306                      {\n307                          if (readerInputStreamSink != null)\n308                          {\n309                              readerInputStreamSink.close();\n310                          }\n311                      }\n312                      catch (IOException exceptIO)\n313                      {\n314                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n315                      }\n316  \n317                      try\n318                      {\n319                          if (streamFileInputSink != null)\n320                          {\n321                              streamFileInputSink.close();\n322                          }\n323                      }\n324                      catch (IOException exceptIO)\n325                      {\n326                          IO.logger.log(Level.WARNING, \"Error closing FileInputStream\", exceptIO);\n327                      }\n328                  }\n329              }\n330          }\n331  \n332      }\n333  \n334      public void foo() throws Throwable\n335      {\n336          fooxx1();\n337          fooxx2();\n338      }\n339  \n340      \n341  \n342  \n343  \n344  \n345      public static void main(String[] args) throws ClassNotFoundException,\n346             InstantiationException, IllegalAccessException\n347      {\n348          mainFromParent(args);\n349      }\n350  }\n351  ",
    "check_result": [
        [
            [
                [
                    53,
                    "data"
                ],
                [
                    111,
                    "file"
                ],
                [
                    119,
                    "streamFileInputSink"
                ]
            ],
            "-------------BEGIN REPORT----------------\nThere is 1 bug(s) in the program:\n- Bug 1, [Explanation: In the file CWE36_Absolute_Path_Traversal__connect_tcp_14.java, the value of data at line 53 is data read using an outbound tcp connection, returned by readLine(), which is determined by the input data from the socket. It is then used to create a File object at line 111, making the variable file sensitive. The file path is then used to open a FileInputStream at line 119, which is sensitive data. Hence, there is an Absolute Path Traversal bug at line 119.], [Trace: (Line 53, is_sensitive(data)), (Line 111, is_sensitive(file)), (Line 119, is_sensitive(streamFileInputSink))]\n---------------END REPORT----------------",
            true,
            0,
            0
        ]
    ]
}