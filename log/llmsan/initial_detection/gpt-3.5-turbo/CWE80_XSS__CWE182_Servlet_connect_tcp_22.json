{
    "response": {
        "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_connect_tcp_22a.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-22a.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: connect_tcp Read data using an outbound tcp connection\n * GoodSource: A hardcoded string\n * Sinks:\n *    BadSink : Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n * Flow Variant: 22 Control flow: Flow controlled by value of a public static variable. Sink functions are in a separate file from sources.\n *\n * */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\npublic class CWE80_XSS__CWE182_Servlet_connect_tcp_22a extends AbstractTestCaseServlet\n{\n    /* The public static variable below is used to drive control flow in the source function.\n     * The public static variable mimics a global variable in the C/C++ language family. */\n    public static boolean badPublicStatic = false;\n\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        badPublicStatic = true;\n        data = CWE80_XSS__CWE182_Servlet_connect_tcp_22b_badSource(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* The public static variables below are used to drive control flow in the source functions.\n     * The public static variable mimics a global variable in the C/C++ language family. */\n    public static boolean goodG2B1PublicStatic = false;\n    public static boolean goodG2B2PublicStatic = false;\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B1(request, response);\n        goodG2B2(request, response);\n    }\n\n    /* goodG2B1() - use goodsource and badsink by setting the static variable to false instead of true */\n    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        goodG2B1PublicStatic = false;\n        data = CWE80_XSS__CWE182_Servlet_connect_tcp_22b_goodG2B1Source(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* goodG2B2() - use goodsource and badsink by reversing the blocks in the if in the sink function */\n    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        goodG2B2PublicStatic = true;\n        data = CWE80_XSS__CWE182_Servlet_connect_tcp_22b_goodG2B2Source(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n\n    public String CWE80_XSS__CWE182_Servlet_connect_tcp_22b_badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (CWE80_XSS__CWE182_Servlet_connect_tcp_22a.badPublicStatic)\n        {\n            data = \"\"; /* Initialize data */\n            /* Read data using an outbound tcp connection */\n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try\n                {\n                    /* Read data using an outbound tcp connection */\n                    socket = new Socket(\"host.example.org\", 39544);\n                    /* read input from socket */\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    /* POTENTIAL FLAW: Read data using an outbound tcp connection */\n                    data = readerBuffered.readLine();\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* clean up stream reading objects */\n                    try\n                    {\n                        if (readerBuffered != null)\n                        {\n                            readerBuffered.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n                    try\n                    {\n                        if (readerInputStream != null)\n                        {\n                            readerInputStream.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n                    /* clean up socket objects */\n                    try\n                    {\n                        if (socket != null)\n                        {\n                            socket.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n                    }\n                }\n            }\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        return data;\n    }\n    /* goodG2B1() - use goodsource and badsink by setting the static variable to false instead of true */\n    public String CWE80_XSS__CWE182_Servlet_connect_tcp_22b_goodG2B1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (CWE80_XSS__CWE182_Servlet_connect_tcp_22a.goodG2B1PublicStatic)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        else\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n        }\n        return data;\n    }\n    /* goodG2B2() - use goodsource and badsink by reversing the blocks in the if in the sink function */\n    public String CWE80_XSS__CWE182_Servlet_connect_tcp_22b_goodG2B2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (CWE80_XSS__CWE182_Servlet_connect_tcp_22a.goodG2B2PublicStatic)\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        return data;\n    }\n}",
        "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  package testcases.CWE80_XSS.s01;\n18  import testcasesupport.*;\n19  \n20  import javax.servlet.http.*;\n21  \n22  public class CWE80_XSS__CWE182_Servlet_connect_tcp_22a extends AbstractTestCaseServlet\n23  {\n24      \n25  \n26      public static boolean hooPublicStatic = false;\n27  \n28      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n29      {\n30          String data;\n31  \n32          hooPublicStatic = true;\n33          data = CWE80_XSS__CWE182_Servlet_connect_tcp_22b_hooSource(request, response);\n34  \n35          if (data != null)\n36          {\n37              \n38              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n39          }\n40  \n41      }\n42  \n43      \n44  \n45      public static boolean fooxx1PublicStatic = false;\n46      public static boolean fooxx2PublicStatic = false;\n47  \n48      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n49      {\n50          fooxx1(request, response);\n51          fooxx2(request, response);\n52      }\n53  \n54      \n55      private void fooxx1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n56      {\n57          String data;\n58  \n59          fooxx1PublicStatic = false;\n60          data = CWE80_XSS__CWE182_Servlet_connect_tcp_22b_fooxx1Source(request, response);\n61  \n62          if (data != null)\n63          {\n64              \n65              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n66          }\n67  \n68      }\n69  \n70      \n71      private void fooxx2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n72      {\n73          String data;\n74  \n75          fooxx2PublicStatic = true;\n76          data = CWE80_XSS__CWE182_Servlet_connect_tcp_22b_fooxx2Source(request, response);\n77  \n78          if (data != null)\n79          {\n80              \n81              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n82          }\n83  \n84      }\n85  \n86      \n87  \n88  \n89  \n90  \n91      public static void main(String[] args) throws ClassNotFoundException,\n92             InstantiationException, IllegalAccessException\n93      {\n94          mainFromParent(args);\n95      }\n96  \n97      public String CWE80_XSS__CWE182_Servlet_connect_tcp_22b_hooSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n98      {\n99          String data;\n100          if (CWE80_XSS__CWE182_Servlet_connect_tcp_22a.hooPublicStatic)\n101          {\n102              data = \"\"; \n103              \n104              {\n105                  Socket socket = null;\n106                  BufferedReader readerBuffered = null;\n107                  InputStreamReader readerInputStream = null;\n108                  try\n109                  {\n110                      \n111                      socket = new Socket(\"host.example.org\", 39544);\n112                      \n113                      readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n114                      readerBuffered = new BufferedReader(readerInputStream);\n115                      \n116                      data = readerBuffered.readLine();\n117                  }\n118                  catch (IOException exceptIO)\n119                  {\n120                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n121                  }\n122                  finally\n123                  {\n124                      \n125                      try\n126                      {\n127                          if (readerBuffered != null)\n128                          {\n129                              readerBuffered.close();\n130                          }\n131                      }\n132                      catch (IOException exceptIO)\n133                      {\n134                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n135                      }\n136                      try\n137                      {\n138                          if (readerInputStream != null)\n139                          {\n140                              readerInputStream.close();\n141                          }\n142                      }\n143                      catch (IOException exceptIO)\n144                      {\n145                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n146                      }\n147                      \n148                      try\n149                      {\n150                          if (socket != null)\n151                          {\n152                              socket.close();\n153                          }\n154                      }\n155                      catch (IOException exceptIO)\n156                      {\n157                          IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n158                      }\n159                  }\n160              }\n161          }\n162          else\n163          {\n164              \n165  \n166              data = null;\n167          }\n168          return data;\n169      }\n170      \n171      public String CWE80_XSS__CWE182_Servlet_connect_tcp_22b_fooxx1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n172      {\n173          String data;\n174          if (CWE80_XSS__CWE182_Servlet_connect_tcp_22a.fooxx1PublicStatic)\n175          {\n176              \n177  \n178              data = null;\n179          }\n180          else\n181          {\n182              \n183              data = \"foo\";\n184          }\n185          return data;\n186      }\n187      \n188      public String CWE80_XSS__CWE182_Servlet_connect_tcp_22b_fooxx2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n189      {\n190          String data;\n191          if (CWE80_XSS__CWE182_Servlet_connect_tcp_22a.fooxx2PublicStatic)\n192          {\n193              \n194              data = \"foo\";\n195          }\n196          else\n197          {\n198              \n199  \n200              data = null;\n201          }\n202          return data;\n203      }\n204  }",
        "response": "-------------BEGIN REPORT----------------\nThere is 1 bug(s) in the program:\n- Bug 1: [Explanation: In the file CWE80_XSS__CWE182_Servlet_connect_tcp_22.java, the value of data at line 32 is produced by the return value of CWE80_XSS__CWE182_Servlet_connect_tcp_22b_hooSource, which reads data from an outbound tcp connection using Socket class. The value of data is then used as the argument of response.getWriter().println at line 38, which makes the argument sensitive. Therefore, there is a Cross-Site Scripting (XSS) bug at line 38.], [Trace: (Line 32, is_sensitive(data)), (Line 38, is_sensitive(data))]\n\n---------------END REPORT----------------",
        "intput token": 0,
        "output token": 0,
        "program line": 0
    }
}