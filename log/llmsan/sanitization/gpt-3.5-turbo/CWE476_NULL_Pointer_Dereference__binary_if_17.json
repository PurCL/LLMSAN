{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__binary_if_17.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.pointflaw.label.xml\nTemplate File: point-flaw-17.tmpl.java\n*/\n/*\n* @description\n* CWE: 476 NULL Pointer Dereference\n* Sinks: binary_if\n*    GoodSink: Do not check for null after the object has been dereferenced\n*    BadSink : Check for null after an object has already been dereferenced\n* Flow Variant: 17 Control flow: for loops\n*\n* */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__binary_if_17 extends AbstractTestCase\n{\n    public void bad() throws Throwable\n    {\n        for(int j = 0; j < 1; j++)\n        {\n            {\n                String myString = null;\n                /* FLAW: Using a single & in the if statement will cause both sides of the expression to be evaluated\n                 * thus causing a NPD */\n                if ((myString != null) & (myString.length() > 0))\n                {\n                    IO.writeLine(\"The string length is greater than 0\");\n                }\n            }\n        }\n    }\n\n    /* good1() use the GoodSinkBody in the for statement */\n    private void good1() throws Throwable\n    {\n        for(int k = 0; k < 1; k++)\n        {\n            {\n                String myString = null;\n                /* FIX: Use && in the if statement so that if the left side of the expression fails then\n                 * the right side will not be evaluated */\n                if ((myString != null) && (myString.length() > 0))\n                {\n                    IO.writeLine(\"The string length is greater than 0\");\n                }\n            }\n        }\n    }\n\n    public void good() throws Throwable\n    {\n        good1();\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE476_NULL_Pointer_Dereference;\n17  \n18  import testcasesupport.*;\n19  \n20  public class CWE476_NULL_Pointer_Dereference__binary_if_17 extends AbstractTestCase\n21  {\n22      public void hoo() throws Throwable\n23      {\n24          for(int j = 0; j < 1; j++)\n25          {\n26              {\n27                  String myString = null;\n28                  \n29  \n30                  if ((myString != null) & (myString.length() > 0))\n31                  {\n32                      IO.writeLine(\"The string length is greater than 0\");\n33                  }\n34              }\n35          }\n36      }\n37  \n38      \n39      private void foo1() throws Throwable\n40      {\n41          for(int k = 0; k < 1; k++)\n42          {\n43              {\n44                  String myString = null;\n45                  \n46  \n47                  if ((myString != null) && (myString.length() > 0))\n48                  {\n49                      IO.writeLine(\"The string length is greater than 0\");\n50                  }\n51              }\n52          }\n53      }\n54  \n55      public void foo() throws Throwable\n56      {\n57          foo1();\n58      }\n59  \n60      \n61  \n62  \n63  \n64  \n65      public static void main(String[] args) throws ClassNotFoundException,\n66             InstantiationException, IllegalAccessException\n67      {\n68          mainFromParent(args);\n69      }\n70  }\n71  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    27,
                    "myString"
                ],
                [
                    30,
                    "myString"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    44,
                    "myString"
                ],
                [
                    47,
                    "myString"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}