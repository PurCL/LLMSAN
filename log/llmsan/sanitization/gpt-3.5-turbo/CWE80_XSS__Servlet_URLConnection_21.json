{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__Servlet_URLConnection_21.java\nLabel Definition File: CWE80_XSS__Servlet.label.xml\nTemplate File: sources-sink-21.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: URLConnection Read data from a web server with URLConnection\n * GoodSource: A hardcoded string\n * Sinks:\n *    BadSink : Display of data in web page without any encoding or validation\n * Flow Variant: 21 Control flow: Flow controlled by value of a private variable. All functions contained in one file.\n *\n * */\n\npackage testcases.CWE80_XSS.s02;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__Servlet_URLConnection_21 extends AbstractTestCaseServlet\n{\n    /* The variable below is used to drive control flow in the source function */\n    private boolean badPrivate = false;\n\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        badPrivate = true;\n        data = bad_source(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    private String bad_source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        if (badPrivate)\n        {\n            data = \"\"; /* Initialize data */\n            /* read input from URLConnection */\n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try\n                {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    /* POTENTIAL FLAW: Read data from a web server with URLConnection */\n                    /* This will be reading the first \"line\" of the response body,\n                     * which could be very long if there are no newlines in the HTML */\n                    data = readerBuffered.readLine();\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* clean up stream reading objects */\n                    try\n                    {\n                        if (readerBuffered != null)\n                        {\n                            readerBuffered.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (readerInputStream != null)\n                        {\n                            readerInputStream.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n                }\n            }\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        return data;\n    }\n\n    /* The variables below are used to drive control flow in the source functions. */\n    private boolean goodG2B1_private = false;\n    private boolean goodG2B2_private = false;\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B1(request, response);\n        goodG2B2(request, response);\n    }\n\n    /* goodG2B1() - use goodsource and badsink by setting the variable to false instead of true */\n    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        goodG2B1_private = false;\n        data = goodG2B1_source(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    private String goodG2B1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = null;\n\n        if (goodG2B1_private)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        else\n        {\n\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n\n        }\n\n        return data;\n    }\n\n    /* goodG2B2() - use goodsource and badsink by reversing the blocks in the if in the sink function */\n    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        goodG2B2_private = true;\n        data = goodG2B2_source(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    private String goodG2B2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = null;\n\n        if (goodG2B2_private)\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        return data;\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  package testcases.CWE80_XSS.s02;\n18  import testcasesupport.*;\n19  \n20  import javax.servlet.http.*;\n21  \n22  import java.io.BufferedReader;\n23  import java.io.InputStreamReader;\n24  import java.io.IOException;\n25  import java.net.URL;\n26  import java.net.URLConnection;\n27  \n28  import java.util.logging.Level;\n29  \n30  public class CWE80_XSS__Servlet_URLConnection_21 extends AbstractTestCaseServlet\n31  {\n32      \n33      private boolean hooPrivate = false;\n34  \n35      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n36      {\n37          String data;\n38  \n39          hooPrivate = true;\n40          data = hoo_source(request, response);\n41  \n42          if (data != null)\n43          {\n44              \n45              response.getWriter().println(\"<br>hoo(): data = \" + data);\n46          }\n47  \n48      }\n49  \n50      private String hoo_source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n51      {\n52          String data;\n53  \n54          if (hooPrivate)\n55          {\n56              data = \"\"; \n57              \n58              {\n59                  URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n60                  BufferedReader readerBuffered = null;\n61                  InputStreamReader readerInputStream = null;\n62                  try\n63                  {\n64                      readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n65                      readerBuffered = new BufferedReader(readerInputStream);\n66                      \n67                      \n68  \n69                      data = readerBuffered.readLine();\n70                  }\n71                  catch (IOException exceptIO)\n72                  {\n73                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n74                  }\n75                  finally\n76                  {\n77                      \n78                      try\n79                      {\n80                          if (readerBuffered != null)\n81                          {\n82                              readerBuffered.close();\n83                          }\n84                      }\n85                      catch (IOException exceptIO)\n86                      {\n87                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n88                      }\n89  \n90                      try\n91                      {\n92                          if (readerInputStream != null)\n93                          {\n94                              readerInputStream.close();\n95                          }\n96                      }\n97                      catch (IOException exceptIO)\n98                      {\n99                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n100                      }\n101                  }\n102              }\n103          }\n104          else\n105          {\n106              \n107  \n108              data = null;\n109          }\n110  \n111          return data;\n112      }\n113  \n114      \n115      private boolean fooxx1_private = false;\n116      private boolean fooxx2_private = false;\n117  \n118      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n119      {\n120          fooxx1(request, response);\n121          fooxx2(request, response);\n122      }\n123  \n124      \n125      private void fooxx1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n126      {\n127          String data;\n128  \n129          fooxx1_private = false;\n130          data = fooxx1_source(request, response);\n131  \n132          if (data != null)\n133          {\n134              \n135              response.getWriter().println(\"<br>hoo(): data = \" + data);\n136          }\n137  \n138      }\n139  \n140      private String fooxx1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n141      {\n142          String data = null;\n143  \n144          if (fooxx1_private)\n145          {\n146              \n147  \n148              data = null;\n149          }\n150          else\n151          {\n152  \n153              \n154              data = \"foo\";\n155  \n156          }\n157  \n158          return data;\n159      }\n160  \n161      \n162      private void fooxx2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n163      {\n164          String data;\n165  \n166          fooxx2_private = true;\n167          data = fooxx2_source(request, response);\n168  \n169          if (data != null)\n170          {\n171              \n172              response.getWriter().println(\"<br>hoo(): data = \" + data);\n173          }\n174  \n175      }\n176  \n177      private String fooxx2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n178      {\n179          String data = null;\n180  \n181          if (fooxx2_private)\n182          {\n183              \n184              data = \"foo\";\n185          }\n186          else\n187          {\n188              \n189  \n190              data = null;\n191          }\n192  \n193          return data;\n194      }\n195  \n196      \n197  \n198  \n199  \n200  \n201      public static void main(String[] args) throws ClassNotFoundException,\n202             InstantiationException, IllegalAccessException\n203      {\n204          mainFromParent(args);\n205      }\n206  \n207  }\n208  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    39,
                    "data"
                ],
                [
                    45,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    166,
                    "data"
                ],
                [
                    172,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        }
    ]
}