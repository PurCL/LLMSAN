{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__Integer_21.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-21.tmpl.java\n*/\n/*\n * @description\n * CWE: 476 Null Pointer Dereference\n * BadSource:  Set data to null\n * GoodSource: Set data to a non-null value\n * Sinks:\n *    GoodSink: add check to prevent possibility of null dereference\n *    BadSink : possibility of null dereference\n * Flow Variant: 21 Control flow: Flow controlled by value of a private variable. All functions contained in one file.\n *\n * */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__Integer_21 extends AbstractTestCase\n{\n    /* The variable below is used to drive control flow in the sink function */\n    private boolean badPrivate = false;\n\n    public void bad() throws Throwable\n    {\n        Integer data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        badPrivate = true;\n        badSink(data );\n    }\n\n    private void badSink(Integer data ) throws Throwable\n    {\n        if (badPrivate)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.toString());\n        }\n    }\n\n    /* The variables below are used to drive control flow in the sink functions. */\n    private boolean goodB2G1Private = false;\n    private boolean goodB2G2Private = false;\n    private boolean goodG2BPrivate = false;\n\n    public void good() throws Throwable\n    {\n        goodB2G1();\n        goodB2G2();\n        goodG2B();\n    }\n\n    /* goodB2G1() - use BadSource and GoodSink by setting the variable to false instead of true */\n    private void goodB2G1() throws Throwable\n    {\n        Integer data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        goodB2G1Private = false;\n        goodB2G1Sink(data );\n    }\n\n    private void goodB2G1Sink(Integer data ) throws Throwable\n    {\n        if (goodB2G1Private)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n            IO.writeLine(\"Benign, fixed string\");\n        }\n        else\n        {\n\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.toString());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n\n        }\n    }\n\n    /* goodB2G2() - use BadSource and GoodSink by reversing the blocks in the if in the sink function */\n    private void goodB2G2() throws Throwable\n    {\n        Integer data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        goodB2G2Private = true;\n        goodB2G2Sink(data );\n    }\n\n    private void goodB2G2Sink(Integer data ) throws Throwable\n    {\n        if (goodB2G2Private)\n        {\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.toString());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n        }\n    }\n\n    /* goodG2B() - use GoodSource and BadSink */\n    private void goodG2B() throws Throwable\n    {\n        Integer data;\n\n        /* FIX: hardcode data to non-null */\n        data = Integer.valueOf(5);\n\n        goodG2BPrivate = true;\n        goodG2BSink(data );\n    }\n\n    private void goodG2BSink(Integer data ) throws Throwable\n    {\n        if (goodG2BPrivate)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.toString());\n        }\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__Integer_21 extends AbstractTestCase\n23  {\n24      \n25      private boolean hooPrivate = false;\n26  \n27      public void hoo() throws Throwable\n28      {\n29          Integer data;\n30  \n31          \n32          data = null;\n33  \n34          hooPrivate = true;\n35          hooSink(data );\n36      }\n37  \n38      private void hooSink(Integer data ) throws Throwable\n39      {\n40          if (hooPrivate)\n41          {\n42              \n43              IO.writeLine(\"\" + data.toString());\n44          }\n45      }\n46  \n47      \n48      private boolean fooyy1Private = false;\n49      private boolean fooyy2Private = false;\n50      private boolean fooxxPrivate = false;\n51  \n52      public void foo() throws Throwable\n53      {\n54          fooyy1();\n55          fooyy2();\n56          fooxx();\n57      }\n58  \n59      \n60      private void fooyy1() throws Throwable\n61      {\n62          Integer data;\n63  \n64          \n65          data = null;\n66  \n67          fooyy1Private = false;\n68          fooyy1Sink(data );\n69      }\n70  \n71      private void fooyy1Sink(Integer data ) throws Throwable\n72      {\n73          if (fooyy1Private)\n74          {\n75              \n76              IO.writeLine(\"Benign, fixed string\");\n77          }\n78          else\n79          {\n80  \n81              \n82              if (data != null)\n83              {\n84                  IO.writeLine(\"\" + data.toString());\n85              }\n86              else\n87              {\n88                  IO.writeLine(\"data is null\");\n89              }\n90  \n91          }\n92      }\n93  \n94      \n95      private void fooyy2() throws Throwable\n96      {\n97          Integer data;\n98  \n99          \n100          data = null;\n101  \n102          fooyy2Private = true;\n103          fooyy2Sink(data );\n104      }\n105  \n106      private void fooyy2Sink(Integer data ) throws Throwable\n107      {\n108          if (fooyy2Private)\n109          {\n110              \n111              if (data != null)\n112              {\n113                  IO.writeLine(\"\" + data.toString());\n114              }\n115              else\n116              {\n117                  IO.writeLine(\"data is null\");\n118              }\n119          }\n120      }\n121  \n122      \n123      private void fooxx() throws Throwable\n124      {\n125          Integer data;\n126  \n127          \n128          data = Integer.valueOf(5);\n129  \n130          fooxxPrivate = true;\n131          fooxxSink(data );\n132      }\n133  \n134      private void fooxxSink(Integer data ) throws Throwable\n135      {\n136          if (fooxxPrivate)\n137          {\n138              \n139              IO.writeLine(\"\" + data.toString());\n140          }\n141      }\n142  \n143      \n144  \n145  \n146  \n147  \n148      public static void main(String[] args) throws ClassNotFoundException,\n149             InstantiationException, IllegalAccessException\n150      {\n151          mainFromParent(args);\n152      }\n153  }\n154  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    32,
                    "data"
                ],
                [
                    35,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    65,
                    "data"
                ],
                [
                    68,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    100,
                    "data"
                ],
                [
                    103,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}