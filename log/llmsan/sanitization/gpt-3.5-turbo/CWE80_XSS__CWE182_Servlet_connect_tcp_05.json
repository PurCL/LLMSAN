{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_connect_tcp_05.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-05.tmpl.java\n*/\n/*\n* @description\n* CWE: 80 Cross Site Scripting (XSS)\n* BadSource: connect_tcp Read data using an outbound tcp connection\n* GoodSource: A hardcoded string\n* BadSink:  Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n* Flow Variant: 05 Control flow: if(privateTrue) and if(privateFalse)\n*\n* */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_connect_tcp_05 extends AbstractTestCaseServlet\n{\n    /* The two variables below are not defined as \"final\", but are never\n     * assigned any other value, so a tool should be able to identify that\n     * reads of these will always return their initialized values.\n     */\n    private boolean privateTrue = true;\n    private boolean privateFalse = false;\n\n    /* uses badsource and badsink */\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (privateTrue)\n        {\n            data = \"\"; /* Initialize data */\n            /* Read data using an outbound tcp connection */\n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try\n                {\n                    /* Read data using an outbound tcp connection */\n                    socket = new Socket(\"host.example.org\", 39544);\n                    /* read input from socket */\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    /* POTENTIAL FLAW: Read data using an outbound tcp connection */\n                    data = readerBuffered.readLine();\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* clean up stream reading objects */\n                    try\n                    {\n                        if (readerBuffered != null)\n                        {\n                            readerBuffered.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (readerInputStream != null)\n                        {\n                            readerInputStream.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n\n                    /* clean up socket objects */\n                    try\n                    {\n                        if (socket != null)\n                        {\n                            socket.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n                    }\n                }\n            }\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* goodG2B1() - use goodsource and badsink by changing privateTrue to privateFalse */\n    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (privateFalse)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        else\n        {\n\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* goodG2B2() - use goodsource and badsink by reversing statements in if */\n    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (privateTrue)\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B1(request, response);\n        goodG2B2(request, response);\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s01;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.io.BufferedReader;\n22  import java.io.InputStreamReader;\n23  import java.io.IOException;\n24  import java.net.Socket;\n25  \n26  import java.util.logging.Level;\n27  \n28  public class CWE80_XSS__CWE182_Servlet_connect_tcp_05 extends AbstractTestCaseServlet\n29  {\n30      \n31  \n32  \n33  \n34      private boolean privateTrue = true;\n35      private boolean privateFalse = false;\n36  \n37      \n38      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n39      {\n40          String data;\n41          if (privateTrue)\n42          {\n43              data = \"\"; \n44              \n45              {\n46                  Socket socket = null;\n47                  BufferedReader readerBuffered = null;\n48                  InputStreamReader readerInputStream = null;\n49                  try\n50                  {\n51                      \n52                      socket = new Socket(\"host.example.org\", 39544);\n53                      \n54                      readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n55                      readerBuffered = new BufferedReader(readerInputStream);\n56                      \n57                      data = readerBuffered.readLine();\n58                  }\n59                  catch (IOException exceptIO)\n60                  {\n61                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n62                  }\n63                  finally\n64                  {\n65                      \n66                      try\n67                      {\n68                          if (readerBuffered != null)\n69                          {\n70                              readerBuffered.close();\n71                          }\n72                      }\n73                      catch (IOException exceptIO)\n74                      {\n75                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n76                      }\n77  \n78                      try\n79                      {\n80                          if (readerInputStream != null)\n81                          {\n82                              readerInputStream.close();\n83                          }\n84                      }\n85                      catch (IOException exceptIO)\n86                      {\n87                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n88                      }\n89  \n90                      \n91                      try\n92                      {\n93                          if (socket != null)\n94                          {\n95                              socket.close();\n96                          }\n97                      }\n98                      catch (IOException exceptIO)\n99                      {\n100                          IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n101                      }\n102                  }\n103              }\n104          }\n105          else\n106          {\n107              \n108  \n109              data = null;\n110          }\n111  \n112          if (data != null)\n113          {\n114              \n115              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n116          }\n117  \n118      }\n119  \n120      \n121      private void fooxx1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n122      {\n123          String data;\n124          if (privateFalse)\n125          {\n126              \n127  \n128              data = null;\n129          }\n130          else\n131          {\n132  \n133              \n134              data = \"foo\";\n135  \n136          }\n137  \n138          if (data != null)\n139          {\n140              \n141              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n142          }\n143  \n144      }\n145  \n146      \n147      private void fooxx2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n148      {\n149          String data;\n150          if (privateTrue)\n151          {\n152              \n153              data = \"foo\";\n154          }\n155          else\n156          {\n157              \n158  \n159              data = null;\n160          }\n161  \n162          if (data != null)\n163          {\n164              \n165              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n166          }\n167  \n168      }\n169  \n170      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n171      {\n172          fooxx1(request, response);\n173          fooxx2(request, response);\n174      }\n175  \n176      \n177  \n178  \n179  \n180  \n181      public static void main(String[] args) throws ClassNotFoundException,\n182             InstantiationException, IllegalAccessException\n183      {\n184          mainFromParent(args);\n185      }\n186  }\n187  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    57,
                    "data"
                ],
                [
                    115,
                    "data.replaceAll(\"(<script>)\", \"\")"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}