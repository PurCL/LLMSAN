{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__Integer_22a.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-22a.tmpl.java\n*/\n/*\n * @description\n * CWE: 476 Null Pointer Dereference\n * BadSource:  Set data to null\n * GoodSource: Set data to a non-null value\n * Sinks:\n *    GoodSink: add check to prevent possibility of null dereference\n *    BadSink : possibility of null dereference\n * Flow Variant: 22 Control flow: Flow controlled by value of a public static variable. Sink functions are in a separate file from sources.\n *\n * */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__Integer_22a extends AbstractTestCase\n{\n    /* The public static variable below is used to drive control flow in the sink function.\n     * The public static variable mimics a global variable in the C/C++ language family. */\n    public static boolean badPublicStatic = false;\n\n    public void bad() throws Throwable\n    {\n        Integer data = null;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        badPublicStatic = true;\n        CWE476_NULL_Pointer_Dereference__Integer_22b_badSink(data );\n    }\n\n    /* The public static variables below are used to drive control flow in the sink functions.\n     * The public static variable mimics a global variable in the C/C++ language family. */\n    public static boolean goodB2G1PublicStatic = false;\n    public static boolean goodB2G2PublicStatic = false;\n    public static boolean goodG2BPublicStatic = false;\n\n    public void good() throws Throwable\n    {\n        goodB2G1();\n        goodB2G2();\n        goodG2B();\n    }\n\n    /* goodB2G1() - use badsource and goodsink by setting the static variable to false instead of true */\n    private void goodB2G1() throws Throwable\n    {\n        Integer data = null;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        goodB2G1PublicStatic = false;\n        CWE476_NULL_Pointer_Dereference__Integer_22b_goodB2G1Sink(data );\n    }\n\n    /* goodB2G2() - use badsource and goodsink by reversing the blocks in the if in the sink function */\n    private void goodB2G2() throws Throwable\n    {\n        Integer data = null;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        goodB2G2PublicStatic = true;\n        CWE476_NULL_Pointer_Dereference__Integer_22b_goodB2G2Sink(data );\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B() throws Throwable\n    {\n        Integer data = null;\n\n        /* FIX: hardcode data to non-null */\n        data = Integer.valueOf(5);\n\n        goodG2BPublicStatic = true;\n        CWE476_NULL_Pointer_Dereference__Integer_22b_goodG2BSink(data );\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public void CWE476_NULL_Pointer_Dereference__Integer_22b_badSink(Integer data ) throws Throwable\n    {\n        if (CWE476_NULL_Pointer_Dereference__Integer_22a.badPublicStatic)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.toString());\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n    }\n    /* goodB2G1() - use badsource and goodsink by setting the static variable to false instead of true */\n    public void CWE476_NULL_Pointer_Dereference__Integer_22b_goodB2G1Sink(Integer data ) throws Throwable\n    {\n        if (CWE476_NULL_Pointer_Dereference__Integer_22a.goodB2G1PublicStatic)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        else\n        {\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.toString());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n        }\n    }\n    /* goodB2G2() - use badsource and goodsink by reversing the blocks in the if in the sink function */\n    public void CWE476_NULL_Pointer_Dereference__Integer_22b_goodB2G2Sink(Integer data ) throws Throwable\n    {\n        if (CWE476_NULL_Pointer_Dereference__Integer_22a.goodB2G2PublicStatic)\n        {\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.toString());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE476_NULL_Pointer_Dereference__Integer_22b_goodG2BSink(Integer data ) throws Throwable\n    {\n        if (CWE476_NULL_Pointer_Dereference__Integer_22a.goodG2BPublicStatic)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.toString());\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__Integer_22a extends AbstractTestCase\n23  {\n24      \n25  \n26      public static boolean hooPublicStatic = false;\n27  \n28      public void hoo() throws Throwable\n29      {\n30          Integer data = null;\n31  \n32          \n33          data = null;\n34  \n35          hooPublicStatic = true;\n36          CWE476_NULL_Pointer_Dereference__Integer_22b_hooSink(data );\n37      }\n38  \n39      \n40  \n41      public static boolean fooyy1PublicStatic = false;\n42      public static boolean fooyy2PublicStatic = false;\n43      public static boolean fooxxPublicStatic = false;\n44  \n45      public void foo() throws Throwable\n46      {\n47          fooyy1();\n48          fooyy2();\n49          fooxx();\n50      }\n51  \n52      \n53      private void fooyy1() throws Throwable\n54      {\n55          Integer data = null;\n56  \n57          \n58          data = null;\n59  \n60          fooyy1PublicStatic = false;\n61          CWE476_NULL_Pointer_Dereference__Integer_22b_fooyy1Sink(data );\n62      }\n63  \n64      \n65      private void fooyy2() throws Throwable\n66      {\n67          Integer data = null;\n68  \n69          \n70          data = null;\n71  \n72          fooyy2PublicStatic = true;\n73          CWE476_NULL_Pointer_Dereference__Integer_22b_fooyy2Sink(data );\n74      }\n75  \n76      \n77      private void fooxx() throws Throwable\n78      {\n79          Integer data = null;\n80  \n81          \n82          data = Integer.valueOf(5);\n83  \n84          fooxxPublicStatic = true;\n85          CWE476_NULL_Pointer_Dereference__Integer_22b_fooxxSink(data );\n86      }\n87  \n88      \n89  \n90  \n91  \n92  \n93      public static void main(String[] args) throws ClassNotFoundException,\n94             InstantiationException, IllegalAccessException\n95      {\n96          mainFromParent(args);\n97      }\n98      public void CWE476_NULL_Pointer_Dereference__Integer_22b_hooSink(Integer data ) throws Throwable\n99      {\n100          if (CWE476_NULL_Pointer_Dereference__Integer_22a.hooPublicStatic)\n101          {\n102              \n103              IO.writeLine(\"\" + data.toString());\n104          }\n105          else\n106          {\n107              \n108  \n109              data = null;\n110          }\n111      }\n112      \n113      public void CWE476_NULL_Pointer_Dereference__Integer_22b_fooyy1Sink(Integer data ) throws Throwable\n114      {\n115          if (CWE476_NULL_Pointer_Dereference__Integer_22a.fooyy1PublicStatic)\n116          {\n117              \n118  \n119              data = null;\n120          }\n121          else\n122          {\n123              \n124              if (data != null)\n125              {\n126                  IO.writeLine(\"\" + data.toString());\n127              }\n128              else\n129              {\n130                  IO.writeLine(\"data is null\");\n131              }\n132          }\n133      }\n134      \n135      public void CWE476_NULL_Pointer_Dereference__Integer_22b_fooyy2Sink(Integer data ) throws Throwable\n136      {\n137          if (CWE476_NULL_Pointer_Dereference__Integer_22a.fooyy2PublicStatic)\n138          {\n139              \n140              if (data != null)\n141              {\n142                  IO.writeLine(\"\" + data.toString());\n143              }\n144              else\n145              {\n146                  IO.writeLine(\"data is null\");\n147              }\n148          }\n149          else\n150          {\n151              \n152  \n153              data = null;\n154          }\n155      }\n156      \n157      public void CWE476_NULL_Pointer_Dereference__Integer_22b_fooxxSink(Integer data ) throws Throwable\n158      {\n159          if (CWE476_NULL_Pointer_Dereference__Integer_22a.fooxxPublicStatic)\n160          {\n161              \n162              IO.writeLine(\"\" + data.toString());\n163          }\n164          else\n165          {\n166              \n167  \n168              data = null;\n169          }\n170      }\n171  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    30,
                    "data"
                ],
                [
                    36,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    55,
                    "data"
                ],
                [
                    61,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    67,
                    "data"
                ],
                [
                    73,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}