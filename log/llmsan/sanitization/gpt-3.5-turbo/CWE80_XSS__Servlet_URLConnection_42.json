{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__Servlet_URLConnection_42.java\nLabel Definition File: CWE80_XSS__Servlet.label.xml\nTemplate File: sources-sink-42.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: URLConnection Read data from a web server with URLConnection\n * GoodSource: A hardcoded string\n * BadSink:  Display of data in web page without any encoding or validation\n * Flow Variant: 42 Data flow: data returned from one method to another in the same class\n *\n * */\n\npackage testcases.CWE80_XSS.s02;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__Servlet_URLConnection_42 extends AbstractTestCaseServlet\n{\n    private String badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        data = \"\"; /* Initialize data */\n\n        /* read input from URLConnection */\n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n\n            try\n            {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n\n                /* POTENTIAL FLAW: Read data from a web server with URLConnection */\n                /* This will be reading the first \"line\" of the response body,\n                 * which could be very long if there are no newlines in the HTML */\n                data = readerBuffered.readLine();\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n            }\n            finally\n            {\n                /* clean up stream reading objects */\n                try\n                {\n                    if (readerBuffered != null)\n                    {\n                        readerBuffered.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                }\n\n                try\n                {\n                    if (readerInputStream != null)\n                    {\n                        readerInputStream.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                }\n            }\n        }\n\n        return data;\n    }\n\n    /* use badsource and badsink */\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = badSource(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    private String goodG2BSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n\n        return data;\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = goodG2BSource(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s02;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.io.BufferedReader;\n22  import java.io.InputStreamReader;\n23  import java.io.IOException;\n24  import java.net.URL;\n25  import java.net.URLConnection;\n26  \n27  import java.util.logging.Level;\n28  \n29  public class CWE80_XSS__Servlet_URLConnection_42 extends AbstractTestCaseServlet\n30  {\n31      private String hooSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n32      {\n33          String data;\n34  \n35          data = \"\"; \n36  \n37          \n38          {\n39              URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n40              BufferedReader readerBuffered = null;\n41              InputStreamReader readerInputStream = null;\n42  \n43              try\n44              {\n45                  readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n46                  readerBuffered = new BufferedReader(readerInputStream);\n47  \n48                  \n49                  \n50  \n51                  data = readerBuffered.readLine();\n52              }\n53              catch (IOException exceptIO)\n54              {\n55                  IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n56              }\n57              finally\n58              {\n59                  \n60                  try\n61                  {\n62                      if (readerBuffered != null)\n63                      {\n64                          readerBuffered.close();\n65                      }\n66                  }\n67                  catch (IOException exceptIO)\n68                  {\n69                      IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n70                  }\n71  \n72                  try\n73                  {\n74                      if (readerInputStream != null)\n75                      {\n76                          readerInputStream.close();\n77                      }\n78                  }\n79                  catch (IOException exceptIO)\n80                  {\n81                      IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n82                  }\n83              }\n84          }\n85  \n86          return data;\n87      }\n88  \n89      \n90      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n91      {\n92          String data = hooSource(request, response);\n93  \n94          if (data != null)\n95          {\n96              \n97              response.getWriter().println(\"<br>hoo(): data = \" + data);\n98          }\n99  \n100      }\n101  \n102      private String fooxxSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n103      {\n104          String data;\n105  \n106          \n107          data = \"foo\";\n108  \n109          return data;\n110      }\n111  \n112      \n113      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n114      {\n115          String data = fooxxSource(request, response);\n116  \n117          if (data != null)\n118          {\n119              \n120              response.getWriter().println(\"<br>hoo(): data = \" + data);\n121          }\n122  \n123      }\n124  \n125      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n126      {\n127          fooxx(request, response);\n128      }\n129  \n130      \n131  \n132  \n133  \n134  \n135      public static void main(String[] args) throws ClassNotFoundException,\n136             InstantiationException, IllegalAccessException\n137      {\n138          mainFromParent(args);\n139      }\n140  \n141  }\n142  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    51,
                    "data"
                ],
                [
                    97,
                    "data)"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}