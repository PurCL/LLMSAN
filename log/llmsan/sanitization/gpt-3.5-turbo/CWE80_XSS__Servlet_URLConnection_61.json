{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__Servlet_URLConnection_61a.java\nLabel Definition File: CWE80_XSS__Servlet.label.xml\nTemplate File: sources-sink-61a.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: URLConnection Read data from a web server with URLConnection\n * GoodSource: A hardcoded string\n * Sinks:\n *    BadSink : Display of data in web page without any encoding or validation\n * Flow Variant: 61 Data flow: data returned from one method to another in different classes in the same package\n *\n * */\n\npackage testcases.CWE80_XSS.s02;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\npublic class CWE80_XSS__Servlet_URLConnection_61a extends AbstractTestCaseServlet\n{\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = CWE80_XSS__Servlet_URLConnection_61b_badSource(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = CWE80_XSS__Servlet_URLConnection_61b_goodG2BSource(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public String CWE80_XSS__Servlet_URLConnection_61b_badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        data = \"\"; /* Initialize data */\n        /* read input from URLConnection */\n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try\n            {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                /* POTENTIAL FLAW: Read data from a web server with URLConnection */\n                /* This will be reading the first \"line\" of the response body,\n                 * which could be very long if there are no newlines in the HTML */\n                data = readerBuffered.readLine();\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n            }\n            finally\n            {\n                /* clean up stream reading objects */\n                try\n                {\n                    if (readerBuffered != null)\n                    {\n                        readerBuffered.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                }\n                try\n                {\n                    if (readerInputStream != null)\n                    {\n                        readerInputStream.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public String CWE80_XSS__Servlet_URLConnection_61b_goodG2BSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n        return data;\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  package testcases.CWE80_XSS.s02;\n18  import testcasesupport.*;\n19  \n20  import javax.servlet.http.*;\n21  \n22  public class CWE80_XSS__Servlet_URLConnection_61a extends AbstractTestCaseServlet\n23  {\n24      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n25      {\n26          String data = CWE80_XSS__Servlet_URLConnection_61b_hooSource(request, response);\n27  \n28          if (data != null)\n29          {\n30              \n31              response.getWriter().println(\"<br>hoo(): data = \" + data);\n32          }\n33  \n34      }\n35  \n36      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n37      {\n38          fooxx(request, response);\n39      }\n40  \n41      \n42      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n43      {\n44          String data = CWE80_XSS__Servlet_URLConnection_61b_fooxxSource(request, response);\n45  \n46          if (data != null)\n47          {\n48              \n49              response.getWriter().println(\"<br>hoo(): data = \" + data);\n50          }\n51  \n52      }\n53  \n54      \n55  \n56  \n57  \n58  \n59      public static void main(String[] args) throws ClassNotFoundException,\n60             InstantiationException, IllegalAccessException\n61      {\n62          mainFromParent(args);\n63      }\n64      public String CWE80_XSS__Servlet_URLConnection_61b_hooSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n65      {\n66          String data;\n67          data = \"\"; \n68          \n69          {\n70              URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n71              BufferedReader readerBuffered = null;\n72              InputStreamReader readerInputStream = null;\n73              try\n74              {\n75                  readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n76                  readerBuffered = new BufferedReader(readerInputStream);\n77                  \n78                  \n79  \n80                  data = readerBuffered.readLine();\n81              }\n82              catch (IOException exceptIO)\n83              {\n84                  IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n85              }\n86              finally\n87              {\n88                  \n89                  try\n90                  {\n91                      if (readerBuffered != null)\n92                      {\n93                          readerBuffered.close();\n94                      }\n95                  }\n96                  catch (IOException exceptIO)\n97                  {\n98                      IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n99                  }\n100                  try\n101                  {\n102                      if (readerInputStream != null)\n103                      {\n104                          readerInputStream.close();\n105                      }\n106                  }\n107                  catch (IOException exceptIO)\n108                  {\n109                      IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n110                  }\n111              }\n112          }\n113          return data;\n114      }\n115      \n116      public String CWE80_XSS__Servlet_URLConnection_61b_fooxxSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n117      {\n118          String data;\n119          \n120          data = \"foo\";\n121          return data;\n122      }\n123  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    26,
                    "data"
                ],
                [
                    31,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}