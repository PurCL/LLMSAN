{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_connect_tcp_16.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-16.tmpl.java\n*/\n/*\n* @description\n* CWE: 80 Cross Site Scripting (XSS)\n* BadSource: connect_tcp Read data using an outbound tcp connection\n* GoodSource: A hardcoded string\n* BadSink:  Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n* Flow Variant: 16 Control flow: while(true)\n*\n* */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_connect_tcp_16 extends AbstractTestCaseServlet\n{\n    /* uses badsource and badsink */\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        while (true)\n        {\n            data = \"\"; /* Initialize data */\n            /* Read data using an outbound tcp connection */\n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try\n                {\n                    /* Read data using an outbound tcp connection */\n                    socket = new Socket(\"host.example.org\", 39544);\n                    /* read input from socket */\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    /* POTENTIAL FLAW: Read data using an outbound tcp connection */\n                    data = readerBuffered.readLine();\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* clean up stream reading objects */\n                    try\n                    {\n                        if (readerBuffered != null)\n                        {\n                            readerBuffered.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (readerInputStream != null)\n                        {\n                            readerInputStream.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n\n                    /* clean up socket objects */\n                    try\n                    {\n                        if (socket != null)\n                        {\n                            socket.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        while (true)\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n            break;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s01;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.io.BufferedReader;\n22  import java.io.InputStreamReader;\n23  import java.io.IOException;\n24  import java.net.Socket;\n25  \n26  import java.util.logging.Level;\n27  \n28  public class CWE80_XSS__CWE182_Servlet_connect_tcp_16 extends AbstractTestCaseServlet\n29  {\n30      \n31      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n32      {\n33          String data;\n34  \n35          while (true)\n36          {\n37              data = \"\"; \n38              \n39              {\n40                  Socket socket = null;\n41                  BufferedReader readerBuffered = null;\n42                  InputStreamReader readerInputStream = null;\n43                  try\n44                  {\n45                      \n46                      socket = new Socket(\"host.example.org\", 39544);\n47                      \n48                      readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n49                      readerBuffered = new BufferedReader(readerInputStream);\n50                      \n51                      data = readerBuffered.readLine();\n52                  }\n53                  catch (IOException exceptIO)\n54                  {\n55                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n56                  }\n57                  finally\n58                  {\n59                      \n60                      try\n61                      {\n62                          if (readerBuffered != null)\n63                          {\n64                              readerBuffered.close();\n65                          }\n66                      }\n67                      catch (IOException exceptIO)\n68                      {\n69                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n70                      }\n71  \n72                      try\n73                      {\n74                          if (readerInputStream != null)\n75                          {\n76                              readerInputStream.close();\n77                          }\n78                      }\n79                      catch (IOException exceptIO)\n80                      {\n81                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n82                      }\n83  \n84                      \n85                      try\n86                      {\n87                          if (socket != null)\n88                          {\n89                              socket.close();\n90                          }\n91                      }\n92                      catch (IOException exceptIO)\n93                      {\n94                          IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n95                      }\n96                  }\n97              }\n98              break;\n99          }\n100  \n101          if (data != null)\n102          {\n103              \n104              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n105          }\n106  \n107      }\n108  \n109      \n110      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n111      {\n112          String data;\n113  \n114          while (true)\n115          {\n116              \n117              data = \"foo\";\n118              break;\n119          }\n120  \n121          if (data != null)\n122          {\n123              \n124              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n125          }\n126  \n127      }\n128  \n129      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n130      {\n131          fooxx(request, response);\n132      }\n133  \n134      \n135  \n136  \n137  \n138  \n139      public static void main(String[] args) throws ClassNotFoundException,\n140             InstantiationException, IllegalAccessException\n141      {\n142          mainFromParent(args);\n143      }\n144  }\n145  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    51,
                    "data"
                ],
                [
                    104,
                    "data.replaceAll(\"(<script>)\", \"\")"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}