{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__Servlet_URLConnection_07.java\nLabel Definition File: CWE80_XSS__Servlet.label.xml\nTemplate File: sources-sink-07.tmpl.java\n*/\n/*\n* @description\n* CWE: 80 Cross Site Scripting (XSS)\n* BadSource: URLConnection Read data from a web server with URLConnection\n* GoodSource: A hardcoded string\n* BadSink:  Display of data in web page without any encoding or validation\n* Flow Variant: 07 Control flow: if(privateFive==5) and if(privateFive!=5)\n*\n* */\n\npackage testcases.CWE80_XSS.s02;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__Servlet_URLConnection_07 extends AbstractTestCaseServlet\n{\n    /* The variable below is not declared \"final\", but is never assigned\n     * any other value so a tool should be able to identify that reads of\n     * this will always give its initialized value.\n     */\n    private int privateFive = 5;\n\n    /* uses badsource and badsink */\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (privateFive == 5)\n        {\n            data = \"\"; /* Initialize data */\n            /* read input from URLConnection */\n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try\n                {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    /* POTENTIAL FLAW: Read data from a web server with URLConnection */\n                    /* This will be reading the first \"line\" of the response body,\n                     * which could be very long if there are no newlines in the HTML */\n                    data = readerBuffered.readLine();\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* clean up stream reading objects */\n                    try\n                    {\n                        if (readerBuffered != null)\n                        {\n                            readerBuffered.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (readerInputStream != null)\n                        {\n                            readerInputStream.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n                }\n            }\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    /* goodG2B1() - use goodsource and badsink by changing privateFive==5 to privateFive!=5 */\n    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (privateFive != 5)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        else\n        {\n\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    /* goodG2B2() - use goodsource and badsink by reversing statements in if */\n    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (privateFive == 5)\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B1(request, response);\n        goodG2B2(request, response);\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s02;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.io.BufferedReader;\n22  import java.io.InputStreamReader;\n23  import java.io.IOException;\n24  import java.net.URL;\n25  import java.net.URLConnection;\n26  \n27  import java.util.logging.Level;\n28  \n29  public class CWE80_XSS__Servlet_URLConnection_07 extends AbstractTestCaseServlet\n30  {\n31      \n32  \n33  \n34  \n35      private int privateFive = 5;\n36  \n37      \n38      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n39      {\n40          String data;\n41          if (privateFive == 5)\n42          {\n43              data = \"\"; \n44              \n45              {\n46                  URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n47                  BufferedReader readerBuffered = null;\n48                  InputStreamReader readerInputStream = null;\n49                  try\n50                  {\n51                      readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n52                      readerBuffered = new BufferedReader(readerInputStream);\n53                      \n54                      \n55  \n56                      data = readerBuffered.readLine();\n57                  }\n58                  catch (IOException exceptIO)\n59                  {\n60                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n61                  }\n62                  finally\n63                  {\n64                      \n65                      try\n66                      {\n67                          if (readerBuffered != null)\n68                          {\n69                              readerBuffered.close();\n70                          }\n71                      }\n72                      catch (IOException exceptIO)\n73                      {\n74                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n75                      }\n76  \n77                      try\n78                      {\n79                          if (readerInputStream != null)\n80                          {\n81                              readerInputStream.close();\n82                          }\n83                      }\n84                      catch (IOException exceptIO)\n85                      {\n86                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n87                      }\n88                  }\n89              }\n90          }\n91          else\n92          {\n93              \n94  \n95              data = null;\n96          }\n97  \n98          if (data != null)\n99          {\n100              \n101              response.getWriter().println(\"<br>hoo(): data = \" + data);\n102          }\n103  \n104      }\n105  \n106      \n107      private void fooxx1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n108      {\n109          String data;\n110          if (privateFive != 5)\n111          {\n112              \n113  \n114              data = null;\n115          }\n116          else\n117          {\n118  \n119              \n120              data = \"foo\";\n121  \n122          }\n123  \n124          if (data != null)\n125          {\n126              \n127              response.getWriter().println(\"<br>hoo(): data = \" + data);\n128          }\n129  \n130      }\n131  \n132      \n133      private void fooxx2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n134      {\n135          String data;\n136          if (privateFive == 5)\n137          {\n138              \n139              data = \"foo\";\n140          }\n141          else\n142          {\n143              \n144  \n145              data = null;\n146          }\n147  \n148          if (data != null)\n149          {\n150              \n151              response.getWriter().println(\"<br>hoo(): data = \" + data);\n152          }\n153  \n154      }\n155  \n156      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n157      {\n158          fooxx1(request, response);\n159          fooxx2(request, response);\n160      }\n161  \n162      \n163  \n164  \n165  \n166  \n167      public static void main(String[] args) throws ClassNotFoundException,\n168             InstantiationException, IllegalAccessException\n169      {\n170          mainFromParent(args);\n171      }\n172  }\n173  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    56,
                    "data"
                ],
                [
                    101,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}