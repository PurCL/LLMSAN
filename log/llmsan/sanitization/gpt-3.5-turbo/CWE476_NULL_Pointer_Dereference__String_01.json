{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__String_01.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-01.tmpl.java\n*/\n/*\n* @description\n* CWE: 476 Null Pointer Dereference\n* BadSource:  Set data to null\n* GoodSource: Set data to a non-null value\n* Sinks:\n*    GoodSink: add check to prevent possibility of null dereference\n*    BadSink : possibility of null dereference\n* Flow Variant: 01 Baseline\n*\n* */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__String_01 extends AbstractTestCase\n{\n    public void bad() throws Throwable\n    {\n        String data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.length());\n\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B();\n        goodB2G();\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B() throws Throwable\n    {\n        String data;\n\n        /* FIX: hardcode data to non-null */\n        data = \"This is not null\";\n\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.length());\n\n    }\n\n    /* goodB2G() - use badsource and goodsink */\n    private void goodB2G() throws Throwable\n    {\n        String data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        /* FIX: validate that data is non-null */\n        if (data != null)\n        {\n            IO.writeLine(\"\" + data.length());\n        }\n        else\n        {\n            IO.writeLine(\"data is null\");\n        }\n\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__String_01 extends AbstractTestCase\n23  {\n24      public void hoo() throws Throwable\n25      {\n26          String data;\n27  \n28          \n29          data = null;\n30  \n31          \n32          IO.writeLine(\"\" + data.length());\n33  \n34      }\n35  \n36      public void foo() throws Throwable\n37      {\n38          fooxx();\n39          fooyy();\n40      }\n41  \n42      \n43      private void fooxx() throws Throwable\n44      {\n45          String data;\n46  \n47          \n48          data = \"This is not null\";\n49  \n50          \n51          IO.writeLine(\"\" + data.length());\n52  \n53      }\n54  \n55      \n56      private void fooyy() throws Throwable\n57      {\n58          String data;\n59  \n60          \n61          data = null;\n62  \n63          \n64          if (data != null)\n65          {\n66              IO.writeLine(\"\" + data.length());\n67          }\n68          else\n69          {\n70              IO.writeLine(\"data is null\");\n71          }\n72  \n73      }\n74  \n75      \n76  \n77  \n78  \n79  \n80      public static void main(String[] args) throws ClassNotFoundException,\n81             InstantiationException, IllegalAccessException\n82      {\n83          mainFromParent(args);\n84      }\n85  }\n86  \n87  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    29,
                    "data"
                ],
                [
                    32,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    61,
                    "data"
                ],
                [
                    66,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}