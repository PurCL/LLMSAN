{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__Servlet_URLConnection_66a.java\nLabel Definition File: CWE80_XSS__Servlet.label.xml\nTemplate File: sources-sink-66a.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: URLConnection Read data from a web server with URLConnection\n * GoodSource: A hardcoded string\n * Sinks:\n *    BadSink : Display of data in web page without any encoding or validation\n * Flow Variant: 66 Data flow: data passed in an array from one method to another in different source files in the same package\n *\n * */\n\npackage testcases.CWE80_XSS.s02;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__Servlet_URLConnection_66a extends AbstractTestCaseServlet\n{\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        data = \"\"; /* Initialize data */\n\n        /* read input from URLConnection */\n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n\n            try\n            {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n\n                /* POTENTIAL FLAW: Read data from a web server with URLConnection */\n                /* This will be reading the first \"line\" of the response body,\n                 * which could be very long if there are no newlines in the HTML */\n                data = readerBuffered.readLine();\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n            }\n            finally\n            {\n                /* clean up stream reading objects */\n                try\n                {\n                    if (readerBuffered != null)\n                    {\n                        readerBuffered.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                }\n\n                try\n                {\n                    if (readerInputStream != null)\n                    {\n                        readerInputStream.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                }\n            }\n        }\n\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        CWE80_XSS__Servlet_URLConnection_66b_badSink(dataArray , request, response );\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        CWE80_XSS__Servlet_URLConnection_66b_goodG2BSink(dataArray , request, response );\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public void CWE80_XSS__Servlet_URLConnection_66b_badSink(String dataArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = dataArray[2];\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE80_XSS__Servlet_URLConnection_66b_goodG2BSink(String dataArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = dataArray[2];\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  package testcases.CWE80_XSS.s02;\n18  import testcasesupport.*;\n19  \n20  import javax.servlet.http.*;\n21  \n22  import java.io.BufferedReader;\n23  import java.io.InputStreamReader;\n24  import java.io.IOException;\n25  import java.net.URL;\n26  import java.net.URLConnection;\n27  \n28  import java.util.logging.Level;\n29  \n30  public class CWE80_XSS__Servlet_URLConnection_66a extends AbstractTestCaseServlet\n31  {\n32      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n33      {\n34          String data;\n35  \n36          data = \"\"; \n37  \n38          \n39          {\n40              URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n41              BufferedReader readerBuffered = null;\n42              InputStreamReader readerInputStream = null;\n43  \n44              try\n45              {\n46                  readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n47                  readerBuffered = new BufferedReader(readerInputStream);\n48  \n49                  \n50                  \n51  \n52                  data = readerBuffered.readLine();\n53              }\n54              catch (IOException exceptIO)\n55              {\n56                  IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n57              }\n58              finally\n59              {\n60                  \n61                  try\n62                  {\n63                      if (readerBuffered != null)\n64                      {\n65                          readerBuffered.close();\n66                      }\n67                  }\n68                  catch (IOException exceptIO)\n69                  {\n70                      IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n71                  }\n72  \n73                  try\n74                  {\n75                      if (readerInputStream != null)\n76                      {\n77                          readerInputStream.close();\n78                      }\n79                  }\n80                  catch (IOException exceptIO)\n81                  {\n82                      IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n83                  }\n84              }\n85          }\n86  \n87          String[] dataArray = new String[5];\n88          dataArray[2] = data;\n89          CWE80_XSS__Servlet_URLConnection_66b_hooSink(dataArray , request, response );\n90      }\n91  \n92      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n93      {\n94          fooxx(request, response);\n95      }\n96  \n97      \n98      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n99      {\n100          String data;\n101  \n102          \n103          data = \"foo\";\n104  \n105          String[] dataArray = new String[5];\n106          dataArray[2] = data;\n107          CWE80_XSS__Servlet_URLConnection_66b_fooxxSink(dataArray , request, response );\n108      }\n109  \n110      \n111  \n112  \n113  \n114  \n115      public static void main(String[] args) throws ClassNotFoundException,\n116             InstantiationException, IllegalAccessException\n117      {\n118          mainFromParent(args);\n119      }\n120      public void CWE80_XSS__Servlet_URLConnection_66b_hooSink(String dataArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable\n121      {\n122          String data = dataArray[2];\n123          if (data != null)\n124          {\n125              \n126              response.getWriter().println(\"<br>hoo(): data = \" + data);\n127          }\n128      }\n129      \n130      public void CWE80_XSS__Servlet_URLConnection_66b_fooxxSink(String dataArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable\n131      {\n132          String data = dataArray[2];\n133          if (data != null)\n134          {\n135              \n136              response.getWriter().println(\"<br>hoo(): data = \" + data);\n137          }\n138      }\n139  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    52,
                    "data"
                ],
                [
                    88,
                    "data"
                ],
                [
                    126,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}