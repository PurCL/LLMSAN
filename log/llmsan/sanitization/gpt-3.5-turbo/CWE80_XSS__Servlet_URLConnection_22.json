{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__Servlet_URLConnection_22a.java\nLabel Definition File: CWE80_XSS__Servlet.label.xml\nTemplate File: sources-sink-22a.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: URLConnection Read data from a web server with URLConnection\n * GoodSource: A hardcoded string\n * Sinks:\n *    BadSink : Display of data in web page without any encoding or validation\n * Flow Variant: 22 Control flow: Flow controlled by value of a public static variable. Sink functions are in a separate file from sources.\n *\n * */\n\npackage testcases.CWE80_XSS.s02;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\npublic class CWE80_XSS__Servlet_URLConnection_22a extends AbstractTestCaseServlet\n{\n    /* The public static variable below is used to drive control flow in the source function.\n     * The public static variable mimics a global variable in the C/C++ language family. */\n    public static boolean badPublicStatic = false;\n\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        badPublicStatic = true;\n        data = CWE80_XSS__Servlet_URLConnection_22b_badSource(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    /* The public static variables below are used to drive control flow in the source functions.\n     * The public static variable mimics a global variable in the C/C++ language family. */\n    public static boolean goodG2B1PublicStatic = false;\n    public static boolean goodG2B2PublicStatic = false;\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B1(request, response);\n        goodG2B2(request, response);\n    }\n\n    /* goodG2B1() - use goodsource and badsink by setting the static variable to false instead of true */\n    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        goodG2B1PublicStatic = false;\n        data = CWE80_XSS__Servlet_URLConnection_22b_goodG2B1Source(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    /* goodG2B2() - use goodsource and badsink by reversing the blocks in the if in the sink function */\n    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        goodG2B2PublicStatic = true;\n        data = CWE80_XSS__Servlet_URLConnection_22b_goodG2B2Source(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n\n    public String CWE80_XSS__Servlet_URLConnection_22b_badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (CWE80_XSS__Servlet_URLConnection_22a.badPublicStatic)\n        {\n            data = \"\"; /* Initialize data */\n            /* read input from URLConnection */\n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try\n                {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    /* POTENTIAL FLAW: Read data from a web server with URLConnection */\n                    /* This will be reading the first \"line\" of the response body,\n                     * which could be very long if there are no newlines in the HTML */\n                    data = readerBuffered.readLine();\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* clean up stream reading objects */\n                    try\n                    {\n                        if (readerBuffered != null)\n                        {\n                            readerBuffered.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n                    try\n                    {\n                        if (readerInputStream != null)\n                        {\n                            readerInputStream.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n                }\n            }\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        return data;\n    }\n    /* goodG2B1() - use goodsource and badsink by setting the static variable to false instead of true */\n    public String CWE80_XSS__Servlet_URLConnection_22b_goodG2B1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (CWE80_XSS__Servlet_URLConnection_22a.goodG2B1PublicStatic)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        else\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n        }\n        return data;\n    }\n    /* goodG2B2() - use goodsource and badsink by reversing the blocks in the if in the sink function */\n    public String CWE80_XSS__Servlet_URLConnection_22b_goodG2B2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (CWE80_XSS__Servlet_URLConnection_22a.goodG2B2PublicStatic)\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        return data;\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  package testcases.CWE80_XSS.s02;\n18  import testcasesupport.*;\n19  \n20  import javax.servlet.http.*;\n21  \n22  public class CWE80_XSS__Servlet_URLConnection_22a extends AbstractTestCaseServlet\n23  {\n24      \n25  \n26      public static boolean hooPublicStatic = false;\n27  \n28      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n29      {\n30          String data;\n31  \n32          hooPublicStatic = true;\n33          data = CWE80_XSS__Servlet_URLConnection_22b_hooSource(request, response);\n34  \n35          if (data != null)\n36          {\n37              \n38              response.getWriter().println(\"<br>hoo(): data = \" + data);\n39          }\n40  \n41      }\n42  \n43      \n44  \n45      public static boolean fooxx1PublicStatic = false;\n46      public static boolean fooxx2PublicStatic = false;\n47  \n48      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n49      {\n50          fooxx1(request, response);\n51          fooxx2(request, response);\n52      }\n53  \n54      \n55      private void fooxx1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n56      {\n57          String data;\n58  \n59          fooxx1PublicStatic = false;\n60          data = CWE80_XSS__Servlet_URLConnection_22b_fooxx1Source(request, response);\n61  \n62          if (data != null)\n63          {\n64              \n65              response.getWriter().println(\"<br>hoo(): data = \" + data);\n66          }\n67  \n68      }\n69  \n70      \n71      private void fooxx2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n72      {\n73          String data;\n74  \n75          fooxx2PublicStatic = true;\n76          data = CWE80_XSS__Servlet_URLConnection_22b_fooxx2Source(request, response);\n77  \n78          if (data != null)\n79          {\n80              \n81              response.getWriter().println(\"<br>hoo(): data = \" + data);\n82          }\n83  \n84      }\n85  \n86      \n87  \n88  \n89  \n90  \n91      public static void main(String[] args) throws ClassNotFoundException,\n92             InstantiationException, IllegalAccessException\n93      {\n94          mainFromParent(args);\n95      }\n96  \n97      public String CWE80_XSS__Servlet_URLConnection_22b_hooSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n98      {\n99          String data;\n100          if (CWE80_XSS__Servlet_URLConnection_22a.hooPublicStatic)\n101          {\n102              data = \"\"; \n103              \n104              {\n105                  URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n106                  BufferedReader readerBuffered = null;\n107                  InputStreamReader readerInputStream = null;\n108                  try\n109                  {\n110                      readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n111                      readerBuffered = new BufferedReader(readerInputStream);\n112                      \n113                      \n114  \n115                      data = readerBuffered.readLine();\n116                  }\n117                  catch (IOException exceptIO)\n118                  {\n119                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n120                  }\n121                  finally\n122                  {\n123                      \n124                      try\n125                      {\n126                          if (readerBuffered != null)\n127                          {\n128                              readerBuffered.close();\n129                          }\n130                      }\n131                      catch (IOException exceptIO)\n132                      {\n133                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n134                      }\n135                      try\n136                      {\n137                          if (readerInputStream != null)\n138                          {\n139                              readerInputStream.close();\n140                          }\n141                      }\n142                      catch (IOException exceptIO)\n143                      {\n144                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n145                      }\n146                  }\n147              }\n148          }\n149          else\n150          {\n151              \n152  \n153              data = null;\n154          }\n155          return data;\n156      }\n157      \n158      public String CWE80_XSS__Servlet_URLConnection_22b_fooxx1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n159      {\n160          String data;\n161          if (CWE80_XSS__Servlet_URLConnection_22a.fooxx1PublicStatic)\n162          {\n163              \n164  \n165              data = null;\n166          }\n167          else\n168          {\n169              \n170              data = \"foo\";\n171          }\n172          return data;\n173      }\n174      \n175      public String CWE80_XSS__Servlet_URLConnection_22b_fooxx2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable\n176      {\n177          String data;\n178          if (CWE80_XSS__Servlet_URLConnection_22a.fooxx2PublicStatic)\n179          {\n180              \n181              data = \"foo\";\n182          }\n183          else\n184          {\n185              \n186  \n187              data = null;\n188          }\n189          return data;\n190      }\n191  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    115,
                    "data"
                ],
                [
                    38,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}