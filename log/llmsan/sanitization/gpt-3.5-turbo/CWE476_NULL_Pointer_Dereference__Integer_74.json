{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__Integer_74a.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-74a.tmpl.java\n*/\n/*\n * @description\n * CWE: 476 Null Pointer Dereference\n * BadSource:  Set data to null\n * GoodSource: Set data to a non-null value\n * Sinks:\n *    GoodSink: add check to prevent possibility of null dereference\n *    BadSink : possibility of null dereference\n * Flow Variant: 74 Data flow: data passed in a HashMap from one method to another in different source files in the same package\n *\n * */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\nimport java.util.HashMap;\n\npublic class CWE476_NULL_Pointer_Dereference__Integer_74a extends AbstractTestCase\n{\n    public void bad() throws Throwable\n    {\n        Integer data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        HashMap<Integer,Integer> dataHashMap = new HashMap<Integer,Integer>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        CWE476_NULL_Pointer_Dereference__Integer_74b_badSink(dataHashMap  );\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B();\n        goodB2G();\n    }\n\n    /* goodG2B() - use GoodSource and BadSink */\n    private void goodG2B() throws Throwable\n    {\n        Integer data;\n\n        /* FIX: hardcode data to non-null */\n        data = Integer.valueOf(5);\n\n        HashMap<Integer,Integer> dataHashMap = new HashMap<Integer,Integer>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        CWE476_NULL_Pointer_Dereference__Integer_74b_goodG2BSink(dataHashMap  );\n    }\n\n    /* goodB2G() - use BadSource and GoodSink */\n    private void goodB2G() throws Throwable\n    {\n        Integer data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        HashMap<Integer,Integer> dataHashMap = new HashMap<Integer,Integer>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        CWE476_NULL_Pointer_Dereference__Integer_74b_goodB2GSink(dataHashMap  );\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public void CWE476_NULL_Pointer_Dereference__Integer_74b_badSink(HashMap<Integer,Integer> dataHashMap ) throws Throwable\n    {\n        Integer data = dataHashMap.get(2);\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.toString());\n    }\n    /* goodG2B() - use GoodSource and BadSink */\n    public void CWE476_NULL_Pointer_Dereference__Integer_74b_goodG2BSink(HashMap<Integer,Integer> dataHashMap ) throws Throwable\n    {\n        Integer data = dataHashMap.get(2);\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.toString());\n    }\n    /* goodB2G() - use BadSource and GoodSink */\n    public void CWE476_NULL_Pointer_Dereference__Integer_74b_goodB2GSink(HashMap<Integer,Integer> dataHashMap ) throws Throwable\n    {\n        Integer data = dataHashMap.get(2);\n        /* FIX: validate that data is non-null */\n        if (data != null)\n        {\n            IO.writeLine(\"\" + data.toString());\n        }\n        else\n        {\n            IO.writeLine(\"data is null\");\n        }\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  import java.util.HashMap;\n22  \n23  public class CWE476_NULL_Pointer_Dereference__Integer_74a extends AbstractTestCase\n24  {\n25      public void hoo() throws Throwable\n26      {\n27          Integer data;\n28  \n29          \n30          data = null;\n31  \n32          HashMap<Integer,Integer> dataHashMap = new HashMap<Integer,Integer>();\n33          dataHashMap.put(0, data);\n34          dataHashMap.put(1, data);\n35          dataHashMap.put(2, data);\n36          CWE476_NULL_Pointer_Dereference__Integer_74b_hooSink(dataHashMap  );\n37      }\n38  \n39      public void foo() throws Throwable\n40      {\n41          fooxx();\n42          fooyy();\n43      }\n44  \n45      \n46      private void fooxx() throws Throwable\n47      {\n48          Integer data;\n49  \n50          \n51          data = Integer.valueOf(5);\n52  \n53          HashMap<Integer,Integer> dataHashMap = new HashMap<Integer,Integer>();\n54          dataHashMap.put(0, data);\n55          dataHashMap.put(1, data);\n56          dataHashMap.put(2, data);\n57          CWE476_NULL_Pointer_Dereference__Integer_74b_fooxxSink(dataHashMap  );\n58      }\n59  \n60      \n61      private void fooyy() throws Throwable\n62      {\n63          Integer data;\n64  \n65          \n66          data = null;\n67  \n68          HashMap<Integer,Integer> dataHashMap = new HashMap<Integer,Integer>();\n69          dataHashMap.put(0, data);\n70          dataHashMap.put(1, data);\n71          dataHashMap.put(2, data);\n72          CWE476_NULL_Pointer_Dereference__Integer_74b_fooyySink(dataHashMap  );\n73      }\n74  \n75      \n76  \n77  \n78  \n79  \n80      public static void main(String[] args) throws ClassNotFoundException,\n81             InstantiationException, IllegalAccessException\n82      {\n83          mainFromParent(args);\n84      }\n85      public void CWE476_NULL_Pointer_Dereference__Integer_74b_hooSink(HashMap<Integer,Integer> dataHashMap ) throws Throwable\n86      {\n87          Integer data = dataHashMap.get(2);\n88          \n89          IO.writeLine(\"\" + data.toString());\n90      }\n91      \n92      public void CWE476_NULL_Pointer_Dereference__Integer_74b_fooxxSink(HashMap<Integer,Integer> dataHashMap ) throws Throwable\n93      {\n94          Integer data = dataHashMap.get(2);\n95          \n96          IO.writeLine(\"\" + data.toString());\n97      }\n98      \n99      public void CWE476_NULL_Pointer_Dereference__Integer_74b_fooyySink(HashMap<Integer,Integer> dataHashMap ) throws Throwable\n100      {\n101          Integer data = dataHashMap.get(2);\n102          \n103          if (data != null)\n104          {\n105              IO.writeLine(\"\" + data.toString());\n106          }\n107          else\n108          {\n109              IO.writeLine(\"data is null\");\n110          }\n111      }\n112  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    30,
                    "data"
                ],
                [
                    33,
                    "data"
                ],
                [
                    34,
                    "data"
                ],
                [
                    35,
                    "data"
                ],
                [
                    86,
                    "data"
                ],
                [
                    89,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    66,
                    "data"
                ],
                [
                    69,
                    "data"
                ],
                [
                    70,
                    "data"
                ],
                [
                    71,
                    "data"
                ],
                [
                    99,
                    "data"
                ],
                [
                    105,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    51,
                    "data"
                ],
                [
                    54,
                    "data"
                ],
                [
                    55,
                    "data"
                ],
                [
                    56,
                    "data"
                ],
                [
                    92,
                    "data"
                ],
                [
                    96,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}