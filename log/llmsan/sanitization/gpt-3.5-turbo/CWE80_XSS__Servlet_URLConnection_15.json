{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__Servlet_URLConnection_15.java\nLabel Definition File: CWE80_XSS__Servlet.label.xml\nTemplate File: sources-sink-15.tmpl.java\n*/\n/*\n* @description\n* CWE: 80 Cross Site Scripting (XSS)\n* BadSource: URLConnection Read data from a web server with URLConnection\n* GoodSource: A hardcoded string\n* BadSink:  Display of data in web page without any encoding or validation\n* Flow Variant: 15 Control flow: switch(6)\n*\n* */\n\npackage testcases.CWE80_XSS.s02;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__Servlet_URLConnection_15 extends AbstractTestCaseServlet\n{\n    /* uses badsource and badsink */\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = null;\n\n        switch (6)\n        {\n        case 6:\n            data = \"\"; /* Initialize data */\n            /* read input from URLConnection */\n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try\n                {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    /* POTENTIAL FLAW: Read data from a web server with URLConnection */\n                    /* This will be reading the first \"line\" of the response body,\n                     * which could be very long if there are no newlines in the HTML */\n                    data = readerBuffered.readLine();\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* clean up stream reading objects */\n                    try\n                    {\n                        if (readerBuffered != null)\n                        {\n                            readerBuffered.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (readerInputStream != null)\n                        {\n                            readerInputStream.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n                }\n            }\n            break;\n        default:\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n            break;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    /* goodG2B1() - use goodsource and badsink by changing the  switch to switch(5) */\n    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = null;\n\n        switch (5)\n        {\n        case 6:\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n            break;\n        default:\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n            break;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    /* goodG2B2() - use goodsource and badsink by reversing the blocks in the switch  */\n    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = null;\n\n        switch (6)\n        {\n        case 6:\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n            break;\n        default:\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n            break;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B1(request, response);\n        goodG2B2(request, response);\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s02;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.io.BufferedReader;\n22  import java.io.InputStreamReader;\n23  import java.io.IOException;\n24  import java.net.URL;\n25  import java.net.URLConnection;\n26  \n27  import java.util.logging.Level;\n28  \n29  public class CWE80_XSS__Servlet_URLConnection_15 extends AbstractTestCaseServlet\n30  {\n31      \n32      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n33      {\n34          String data = null;\n35  \n36          switch (6)\n37          {\n38          case 6:\n39              data = \"\"; \n40              \n41              {\n42                  URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n43                  BufferedReader readerBuffered = null;\n44                  InputStreamReader readerInputStream = null;\n45                  try\n46                  {\n47                      readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n48                      readerBuffered = new BufferedReader(readerInputStream);\n49                      \n50                      \n51  \n52                      data = readerBuffered.readLine();\n53                  }\n54                  catch (IOException exceptIO)\n55                  {\n56                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n57                  }\n58                  finally\n59                  {\n60                      \n61                      try\n62                      {\n63                          if (readerBuffered != null)\n64                          {\n65                              readerBuffered.close();\n66                          }\n67                      }\n68                      catch (IOException exceptIO)\n69                      {\n70                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n71                      }\n72  \n73                      try\n74                      {\n75                          if (readerInputStream != null)\n76                          {\n77                              readerInputStream.close();\n78                          }\n79                      }\n80                      catch (IOException exceptIO)\n81                      {\n82                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n83                      }\n84                  }\n85              }\n86              break;\n87          default:\n88              \n89  \n90              data = null;\n91              break;\n92          }\n93  \n94          if (data != null)\n95          {\n96              \n97              response.getWriter().println(\"<br>hoo(): data = \" + data);\n98          }\n99  \n100      }\n101  \n102      \n103      private void fooxx1(HttpServletRequest request, HttpServletResponse response) throws Throwable\n104      {\n105          String data = null;\n106  \n107          switch (5)\n108          {\n109          case 6:\n110              \n111  \n112              data = null;\n113              break;\n114          default:\n115              \n116              data = \"foo\";\n117              break;\n118          }\n119  \n120          if (data != null)\n121          {\n122              \n123              response.getWriter().println(\"<br>hoo(): data = \" + data);\n124          }\n125  \n126      }\n127  \n128      \n129      private void fooxx2(HttpServletRequest request, HttpServletResponse response) throws Throwable\n130      {\n131          String data = null;\n132  \n133          switch (6)\n134          {\n135          case 6:\n136              \n137              data = \"foo\";\n138              break;\n139          default:\n140              \n141  \n142              data = null;\n143              break;\n144          }\n145  \n146          if (data != null)\n147          {\n148              \n149              response.getWriter().println(\"<br>hoo(): data = \" + data);\n150          }\n151  \n152      }\n153  \n154      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n155      {\n156          fooxx1(request, response);\n157          fooxx2(request, response);\n158      }\n159  \n160      \n161  \n162  \n163  \n164  \n165      public static void main(String[] args) throws ClassNotFoundException,\n166             InstantiationException, IllegalAccessException\n167      {\n168          mainFromParent(args);\n169      }\n170  }\n171  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    52,
                    "data"
                ],
                [
                    97,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}