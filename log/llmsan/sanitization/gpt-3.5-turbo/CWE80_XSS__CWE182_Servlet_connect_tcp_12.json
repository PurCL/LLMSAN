{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_connect_tcp_12.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-12.tmpl.java\n*/\n/*\n* @description\n* CWE: 80 Cross Site Scripting (XSS)\n* BadSource: connect_tcp Read data using an outbound tcp connection\n* GoodSource: A hardcoded string\n* BadSink:  Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n* Flow Variant: 12 Control flow: if(IO.staticReturnsTrueOrFalse())\n*\n* */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_connect_tcp_12 extends AbstractTestCaseServlet\n{\n    /* uses badsource and badsink - see how tools report flaws that don't always occur */\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (IO.staticReturnsTrueOrFalse())\n        {\n            data = \"\"; /* Initialize data */\n            /* Read data using an outbound tcp connection */\n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try\n                {\n                    /* Read data using an outbound tcp connection */\n                    socket = new Socket(\"host.example.org\", 39544);\n                    /* read input from socket */\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    /* POTENTIAL FLAW: Read data using an outbound tcp connection */\n                    data = readerBuffered.readLine();\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n                }\n                finally\n                {\n                    /* clean up stream reading objects */\n                    try\n                    {\n                        if (readerBuffered != null)\n                        {\n                            readerBuffered.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                    }\n\n                    try\n                    {\n                        if (readerInputStream != null)\n                        {\n                            readerInputStream.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                    }\n\n                    /* clean up socket objects */\n                    try\n                    {\n                        if (socket != null)\n                        {\n                            socket.close();\n                        }\n                    }\n                    catch (IOException exceptIO)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n                    }\n                }\n            }\n        }\n        else\n        {\n\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* goodG2B() - use goodsource and badsink by changing the \"if\" so that\n     * both branches use the GoodSource */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (IO.staticReturnsTrueOrFalse())\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n        }\n        else\n        {\n\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s01;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.io.BufferedReader;\n22  import java.io.InputStreamReader;\n23  import java.io.IOException;\n24  import java.net.Socket;\n25  \n26  import java.util.logging.Level;\n27  \n28  public class CWE80_XSS__CWE182_Servlet_connect_tcp_12 extends AbstractTestCaseServlet\n29  {\n30      \n31      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n32      {\n33          String data;\n34          if (IO.staticReturnsTrueOrFalse())\n35          {\n36              data = \"\"; \n37              \n38              {\n39                  Socket socket = null;\n40                  BufferedReader readerBuffered = null;\n41                  InputStreamReader readerInputStream = null;\n42                  try\n43                  {\n44                      \n45                      socket = new Socket(\"host.example.org\", 39544);\n46                      \n47                      readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n48                      readerBuffered = new BufferedReader(readerInputStream);\n49                      \n50                      data = readerBuffered.readLine();\n51                  }\n52                  catch (IOException exceptIO)\n53                  {\n54                      IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n55                  }\n56                  finally\n57                  {\n58                      \n59                      try\n60                      {\n61                          if (readerBuffered != null)\n62                          {\n63                              readerBuffered.close();\n64                          }\n65                      }\n66                      catch (IOException exceptIO)\n67                      {\n68                          IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n69                      }\n70  \n71                      try\n72                      {\n73                          if (readerInputStream != null)\n74                          {\n75                              readerInputStream.close();\n76                          }\n77                      }\n78                      catch (IOException exceptIO)\n79                      {\n80                          IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n81                      }\n82  \n83                      \n84                      try\n85                      {\n86                          if (socket != null)\n87                          {\n88                              socket.close();\n89                          }\n90                      }\n91                      catch (IOException exceptIO)\n92                      {\n93                          IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n94                      }\n95                  }\n96              }\n97          }\n98          else\n99          {\n100  \n101              \n102              data = \"foo\";\n103  \n104          }\n105  \n106          if (data != null)\n107          {\n108              \n109              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n110          }\n111  \n112      }\n113  \n114      \n115  \n116      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n117      {\n118          String data;\n119          if (IO.staticReturnsTrueOrFalse())\n120          {\n121              \n122              data = \"foo\";\n123          }\n124          else\n125          {\n126  \n127              \n128              data = \"foo\";\n129  \n130          }\n131  \n132          if (data != null)\n133          {\n134              \n135              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n136          }\n137  \n138      }\n139  \n140      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n141      {\n142          fooxx(request, response);\n143      }\n144  \n145      \n146  \n147  \n148  \n149  \n150      public static void main(String[] args) throws ClassNotFoundException,\n151             InstantiationException, IllegalAccessException\n152      {\n153          mainFromParent(args);\n154      }\n155  }\n156  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    50,
                    "data"
                ],
                [
                    109,
                    "data.replaceAll(\"(<script>)\", \"\")"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}