{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_connect_tcp_01.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-01.tmpl.java\n*/\n/*\n* @description\n* CWE: 80 Cross Site Scripting (XSS)\n* BadSource: connect_tcp Read data using an outbound tcp connection\n* GoodSource: A hardcoded string\n* BadSink:  Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n* Flow Variant: 01 Baseline\n*\n* */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_connect_tcp_01 extends AbstractTestCaseServlet\n{\n    /* uses badsource and badsink */\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        data = \"\"; /* Initialize data */\n\n        /* Read data using an outbound tcp connection */\n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n\n            try\n            {\n                /* Read data using an outbound tcp connection */\n                socket = new Socket(\"host.example.org\", 39544);\n\n                /* read input from socket */\n\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n\n                /* POTENTIAL FLAW: Read data using an outbound tcp connection */\n                data = readerBuffered.readLine();\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n            }\n            finally\n            {\n                /* clean up stream reading objects */\n                try\n                {\n                    if (readerBuffered != null)\n                    {\n                        readerBuffered.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                }\n\n                try\n                {\n                    if (readerInputStream != null)\n                    {\n                        readerInputStream.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                }\n\n                /* clean up socket objects */\n                try\n                {\n                    if (socket != null)\n                    {\n                        socket.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n                }\n            }\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* goodG2B() - uses goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s01;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.io.BufferedReader;\n22  import java.io.InputStreamReader;\n23  import java.io.IOException;\n24  import java.net.Socket;\n25  \n26  import java.util.logging.Level;\n27  \n28  public class CWE80_XSS__CWE182_Servlet_connect_tcp_01 extends AbstractTestCaseServlet\n29  {\n30      \n31      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n32      {\n33          String data;\n34  \n35          data = \"\"; \n36  \n37          \n38          {\n39              Socket socket = null;\n40              BufferedReader readerBuffered = null;\n41              InputStreamReader readerInputStream = null;\n42  \n43              try\n44              {\n45                  \n46                  socket = new Socket(\"host.example.org\", 39544);\n47  \n48                  \n49  \n50                  readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n51                  readerBuffered = new BufferedReader(readerInputStream);\n52  \n53                  \n54                  data = readerBuffered.readLine();\n55              }\n56              catch (IOException exceptIO)\n57              {\n58                  IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n59              }\n60              finally\n61              {\n62                  \n63                  try\n64                  {\n65                      if (readerBuffered != null)\n66                      {\n67                          readerBuffered.close();\n68                      }\n69                  }\n70                  catch (IOException exceptIO)\n71                  {\n72                      IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n73                  }\n74  \n75                  try\n76                  {\n77                      if (readerInputStream != null)\n78                      {\n79                          readerInputStream.close();\n80                      }\n81                  }\n82                  catch (IOException exceptIO)\n83                  {\n84                      IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n85                  }\n86  \n87                  \n88                  try\n89                  {\n90                      if (socket != null)\n91                      {\n92                          socket.close();\n93                      }\n94                  }\n95                  catch (IOException exceptIO)\n96                  {\n97                      IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n98                  }\n99              }\n100          }\n101  \n102          if (data != null)\n103          {\n104              \n105              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n106          }\n107  \n108      }\n109  \n110      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n111      {\n112          fooxx(request, response);\n113      }\n114  \n115      \n116      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n117      {\n118          String data;\n119  \n120          \n121          data = \"foo\";\n122  \n123          if (data != null)\n124          {\n125              \n126              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n127          }\n128  \n129      }\n130  \n131      \n132  \n133  \n134  \n135  \n136      public static void main(String[] args) throws ClassNotFoundException,\n137             InstantiationException, IllegalAccessException\n138      {\n139          mainFromParent(args);\n140      }\n141  }\n142  \n143  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    54,
                    "data"
                ],
                [
                    105,
                    "data.replaceAll(\"(<script>)\", \"\")"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}