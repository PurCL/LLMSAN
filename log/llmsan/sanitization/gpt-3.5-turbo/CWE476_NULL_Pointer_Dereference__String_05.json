{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__String_05.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-05.tmpl.java\n*/\n/*\n* @description\n* CWE: 476 Null Pointer Dereference\n* BadSource:  Set data to null\n* GoodSource: Set data to a non-null value\n* Sinks:\n*    GoodSink: add check to prevent possibility of null dereference\n*    BadSink : possibility of null dereference\n* Flow Variant: 05 Control flow: if(privateTrue) and if(privateFalse)\n*\n* */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__String_05 extends AbstractTestCase\n{\n    /* The two variables below are not defined as \"final\", but are never\n     * assigned any other value, so a tool should be able to identify that\n     * reads of these will always return their initialized values.\n     */\n    private boolean privateTrue = true;\n    private boolean privateFalse = false;\n\n    public void bad() throws Throwable\n    {\n        String data;\n        if (privateTrue)\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (privateTrue)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.length());\n        }\n    }\n\n    /* goodG2B1() - use goodsource and badsink by changing first privateTrue to privateFalse */\n    private void goodG2B1() throws Throwable\n    {\n        String data;\n        if (privateFalse)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        else\n        {\n\n            /* FIX: hardcode data to non-null */\n            data = \"This is not null\";\n\n        }\n\n        if (privateTrue)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.length());\n        }\n    }\n\n    /* goodG2B2() - use goodsource and badsink by reversing statements in first if */\n    private void goodG2B2() throws Throwable\n    {\n        String data;\n        if (privateTrue)\n        {\n            /* FIX: hardcode data to non-null */\n            data = \"This is not null\";\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (privateTrue)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.length());\n        }\n    }\n\n    /* goodB2G1() - use badsource and goodsink by changing second privateTrue to privateFalse */\n    private void goodB2G1() throws Throwable\n    {\n        String data;\n\n        if (privateTrue)\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (privateFalse)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n            IO.writeLine(\"Benign, fixed string\");\n        }\n        else\n        {\n\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.length());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n\n        }\n    }\n\n    /* goodB2G2() - use badsource and goodsink by reversing statements in second if  */\n    private void goodB2G2() throws Throwable\n    {\n        String data;\n        if (privateTrue)\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (privateTrue)\n        {\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.length());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n        }\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B1();\n        goodG2B2();\n        goodB2G1();\n        goodB2G2();\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__String_05 extends AbstractTestCase\n23  {\n24      \n25  \n26  \n27  \n28      private boolean privateTrue = true;\n29      private boolean privateFalse = false;\n30  \n31      public void hoo() throws Throwable\n32      {\n33          String data;\n34          if (privateTrue)\n35          {\n36              \n37              data = null;\n38          }\n39          else\n40          {\n41              \n42  \n43              data = null;\n44          }\n45  \n46          if (privateTrue)\n47          {\n48              \n49              IO.writeLine(\"\" + data.length());\n50          }\n51      }\n52  \n53      \n54      private void fooxx1() throws Throwable\n55      {\n56          String data;\n57          if (privateFalse)\n58          {\n59              \n60  \n61              data = null;\n62          }\n63          else\n64          {\n65  \n66              \n67              data = \"This is not null\";\n68  \n69          }\n70  \n71          if (privateTrue)\n72          {\n73              \n74              IO.writeLine(\"\" + data.length());\n75          }\n76      }\n77  \n78      \n79      private void fooxx2() throws Throwable\n80      {\n81          String data;\n82          if (privateTrue)\n83          {\n84              \n85              data = \"This is not null\";\n86          }\n87          else\n88          {\n89              \n90  \n91              data = null;\n92          }\n93  \n94          if (privateTrue)\n95          {\n96              \n97              IO.writeLine(\"\" + data.length());\n98          }\n99      }\n100  \n101      \n102      private void fooyy1() throws Throwable\n103      {\n104          String data;\n105  \n106          if (privateTrue)\n107          {\n108              \n109              data = null;\n110          }\n111          else\n112          {\n113              \n114  \n115              data = null;\n116          }\n117  \n118          if (privateFalse)\n119          {\n120              \n121              IO.writeLine(\"Benign, fixed string\");\n122          }\n123          else\n124          {\n125  \n126              \n127              if (data != null)\n128              {\n129                  IO.writeLine(\"\" + data.length());\n130              }\n131              else\n132              {\n133                  IO.writeLine(\"data is null\");\n134              }\n135  \n136          }\n137      }\n138  \n139      \n140      private void fooyy2() throws Throwable\n141      {\n142          String data;\n143          if (privateTrue)\n144          {\n145              \n146              data = null;\n147          }\n148          else\n149          {\n150              \n151  \n152              data = null;\n153          }\n154  \n155          if (privateTrue)\n156          {\n157              \n158              if (data != null)\n159              {\n160                  IO.writeLine(\"\" + data.length());\n161              }\n162              else\n163              {\n164                  IO.writeLine(\"data is null\");\n165              }\n166          }\n167      }\n168  \n169      public void foo() throws Throwable\n170      {\n171          fooxx1();\n172          fooxx2();\n173          fooyy1();\n174          fooyy2();\n175      }\n176  \n177      \n178  \n179  \n180  \n181  \n182      public static void main(String[] args) throws ClassNotFoundException,\n183             InstantiationException, IllegalAccessException\n184      {\n185          mainFromParent(args);\n186      }\n187  }\n188  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    37,
                    "data"
                ],
                [
                    49,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    61,
                    "data"
                ],
                [
                    74,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    91,
                    "data"
                ],
                [
                    97,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    146,
                    "data"
                ],
                [
                    160,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}