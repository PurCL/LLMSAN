{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__Integer_61a.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-61a.tmpl.java\n*/\n/*\n * @description\n * CWE: 476 Null Pointer Dereference\n * BadSource:  Set data to null\n * GoodSource: Set data to a non-null value\n * Sinks:\n *    GoodSink: add check to prevent possibility of null dereference\n *    BadSink : possibility of null dereference\n * Flow Variant: 61 Data flow: data returned from one method to another in different classes in the same package\n *\n * */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__Integer_61a extends AbstractTestCase\n{\n    public void bad() throws Throwable\n    {\n        Integer data = CWE476_NULL_Pointer_Dereference__Integer_61b_badSource();\n\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.toString());\n\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B();\n        goodB2G();\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B() throws Throwable\n    {\n        Integer data = CWE476_NULL_Pointer_Dereference__Integer_61b_goodG2BSource();\n\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.toString());\n\n    }\n\n    /* goodB2G() - use badsource and goodsink */\n    private void goodB2G() throws Throwable\n    {\n        Integer data = CWE476_NULL_Pointer_Dereference__Integer_61b_goodB2GSource();\n\n        /* FIX: validate that data is non-null */\n        if (data != null)\n        {\n            IO.writeLine(\"\" + data.toString());\n        }\n        else\n        {\n            IO.writeLine(\"data is null\");\n        }\n\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public Integer CWE476_NULL_Pointer_Dereference__Integer_61b_badSource() throws Throwable\n    {\n        Integer data;\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n        return data;\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public Integer CWE476_NULL_Pointer_Dereference__Integer_61b_goodG2BSource() throws Throwable\n    {\n        Integer data;\n        /* FIX: hardcode data to non-null */\n        data = Integer.valueOf(5);\n        return data;\n    }\n    /* goodB2G() - use badsource and goodsink */\n    public Integer CWE476_NULL_Pointer_Dereference__Integer_61b_goodB2GSource() throws Throwable\n    {\n        Integer data;\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n        return data;\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__Integer_61a extends AbstractTestCase\n23  {\n24      public void hoo() throws Throwable\n25      {\n26          Integer data = CWE476_NULL_Pointer_Dereference__Integer_61b_hooSource();\n27  \n28          \n29          IO.writeLine(\"\" + data.toString());\n30  \n31      }\n32  \n33      public void foo() throws Throwable\n34      {\n35          fooxx();\n36          fooyy();\n37      }\n38  \n39      \n40      private void fooxx() throws Throwable\n41      {\n42          Integer data = CWE476_NULL_Pointer_Dereference__Integer_61b_fooxxSource();\n43  \n44          \n45          IO.writeLine(\"\" + data.toString());\n46  \n47      }\n48  \n49      \n50      private void fooyy() throws Throwable\n51      {\n52          Integer data = CWE476_NULL_Pointer_Dereference__Integer_61b_fooyySource();\n53  \n54          \n55          if (data != null)\n56          {\n57              IO.writeLine(\"\" + data.toString());\n58          }\n59          else\n60          {\n61              IO.writeLine(\"data is null\");\n62          }\n63  \n64      }\n65  \n66      \n67  \n68  \n69  \n70  \n71      public static void main(String[] args) throws ClassNotFoundException,\n72             InstantiationException, IllegalAccessException\n73      {\n74          mainFromParent(args);\n75      }\n76      public Integer CWE476_NULL_Pointer_Dereference__Integer_61b_hooSource() throws Throwable\n77      {\n78          Integer data;\n79          \n80          data = null;\n81          return data;\n82      }\n83      \n84      public Integer CWE476_NULL_Pointer_Dereference__Integer_61b_fooxxSource() throws Throwable\n85      {\n86          Integer data;\n87          \n88          data = Integer.valueOf(5);\n89          return data;\n90      }\n91      \n92      public Integer CWE476_NULL_Pointer_Dereference__Integer_61b_fooyySource() throws Throwable\n93      {\n94          Integer data;\n95          \n96          data = null;\n97          return data;\n98      }\n99  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    26,
                    "data"
                ],
                [
                    29,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    42,
                    "data"
                ],
                [
                    45,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    52,
                    "data"
                ],
                [
                    55,
                    "data"
                ],
                [
                    57,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}