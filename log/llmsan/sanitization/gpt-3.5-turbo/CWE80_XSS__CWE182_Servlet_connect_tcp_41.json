{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_connect_tcp_41.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-41.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: connect_tcp Read data using an outbound tcp connection\n * GoodSource: A hardcoded string\n * BadSink:  Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n * Flow Variant: 41 Data flow: data passed as an argument from one method to another in the same class\n *\n * */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_connect_tcp_41 extends AbstractTestCaseServlet\n{\n    private void badSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        data = \"\"; /* Initialize data */\n\n        /* Read data using an outbound tcp connection */\n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n\n            try\n            {\n                /* Read data using an outbound tcp connection */\n                socket = new Socket(\"host.example.org\", 39544);\n\n                /* read input from socket */\n\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n\n                /* POTENTIAL FLAW: Read data using an outbound tcp connection */\n                data = readerBuffered.readLine();\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n            }\n            finally\n            {\n                /* clean up stream reading objects */\n                try\n                {\n                    if (readerBuffered != null)\n                    {\n                        readerBuffered.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                }\n\n                try\n                {\n                    if (readerInputStream != null)\n                    {\n                        readerInputStream.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                }\n\n                /* clean up socket objects */\n                try\n                {\n                    if (socket != null)\n                    {\n                        socket.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n                }\n            }\n        }\n\n        badSink(data , request, response );\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    private void goodG2BSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n\n        goodG2BSink(data , request, response );\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s01;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.io.BufferedReader;\n22  import java.io.InputStreamReader;\n23  import java.io.IOException;\n24  import java.net.Socket;\n25  \n26  import java.util.logging.Level;\n27  \n28  public class CWE80_XSS__CWE182_Servlet_connect_tcp_41 extends AbstractTestCaseServlet\n29  {\n30      private void hooSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n31      {\n32  \n33          if (data != null)\n34          {\n35              \n36              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n37          }\n38  \n39      }\n40  \n41      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n42      {\n43          String data;\n44  \n45          data = \"\"; \n46  \n47          \n48          {\n49              Socket socket = null;\n50              BufferedReader readerBuffered = null;\n51              InputStreamReader readerInputStream = null;\n52  \n53              try\n54              {\n55                  \n56                  socket = new Socket(\"host.example.org\", 39544);\n57  \n58                  \n59  \n60                  readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n61                  readerBuffered = new BufferedReader(readerInputStream);\n62  \n63                  \n64                  data = readerBuffered.readLine();\n65              }\n66              catch (IOException exceptIO)\n67              {\n68                  IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n69              }\n70              finally\n71              {\n72                  \n73                  try\n74                  {\n75                      if (readerBuffered != null)\n76                      {\n77                          readerBuffered.close();\n78                      }\n79                  }\n80                  catch (IOException exceptIO)\n81                  {\n82                      IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n83                  }\n84  \n85                  try\n86                  {\n87                      if (readerInputStream != null)\n88                      {\n89                          readerInputStream.close();\n90                      }\n91                  }\n92                  catch (IOException exceptIO)\n93                  {\n94                      IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n95                  }\n96  \n97                  \n98                  try\n99                  {\n100                      if (socket != null)\n101                      {\n102                          socket.close();\n103                      }\n104                  }\n105                  catch (IOException exceptIO)\n106                  {\n107                      IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n108                  }\n109              }\n110          }\n111  \n112          hooSink(data , request, response );\n113      }\n114  \n115      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n116      {\n117          fooxx(request, response);\n118      }\n119  \n120      private void fooxxSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n121      {\n122  \n123          if (data != null)\n124          {\n125              \n126              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n127          }\n128  \n129      }\n130  \n131      \n132      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n133      {\n134          String data;\n135  \n136          \n137          data = \"foo\";\n138  \n139          fooxxSink(data , request, response );\n140      }\n141  \n142      \n143  \n144  \n145  \n146  \n147      public static void main(String[] args) throws ClassNotFoundException,\n148             InstantiationException, IllegalAccessException\n149      {\n150          mainFromParent(args);\n151      }\n152  }\n153  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    64,
                    "data"
                ],
                [
                    112,
                    "data"
                ],
                [
                    36,
                    "data.replaceAll(\"(<script>)\", \"\")"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}