{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__Servlet_URLConnection_41.java\nLabel Definition File: CWE80_XSS__Servlet.label.xml\nTemplate File: sources-sink-41.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: URLConnection Read data from a web server with URLConnection\n * GoodSource: A hardcoded string\n * BadSink:  Display of data in web page without any encoding or validation\n * Flow Variant: 41 Data flow: data passed as an argument from one method to another in the same class\n *\n * */\n\npackage testcases.CWE80_XSS.s02;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__Servlet_URLConnection_41 extends AbstractTestCaseServlet\n{\n    private void badSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        data = \"\"; /* Initialize data */\n\n        /* read input from URLConnection */\n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n\n            try\n            {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n\n                /* POTENTIAL FLAW: Read data from a web server with URLConnection */\n                /* This will be reading the first \"line\" of the response body,\n                 * which could be very long if there are no newlines in the HTML */\n                data = readerBuffered.readLine();\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n            }\n            finally\n            {\n                /* clean up stream reading objects */\n                try\n                {\n                    if (readerBuffered != null)\n                    {\n                        readerBuffered.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                }\n\n                try\n                {\n                    if (readerInputStream != null)\n                    {\n                        readerInputStream.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                }\n            }\n        }\n\n        badSink(data , request, response );\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    private void goodG2BSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n\n        goodG2BSink(data , request, response );\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s02;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.io.BufferedReader;\n22  import java.io.InputStreamReader;\n23  import java.io.IOException;\n24  import java.net.URL;\n25  import java.net.URLConnection;\n26  \n27  import java.util.logging.Level;\n28  \n29  public class CWE80_XSS__Servlet_URLConnection_41 extends AbstractTestCaseServlet\n30  {\n31      private void hooSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n32      {\n33  \n34          if (data != null)\n35          {\n36              \n37              response.getWriter().println(\"<br>hoo(): data = \" + data);\n38          }\n39  \n40      }\n41  \n42      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n43      {\n44          String data;\n45  \n46          data = \"\"; \n47  \n48          \n49          {\n50              URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n51              BufferedReader readerBuffered = null;\n52              InputStreamReader readerInputStream = null;\n53  \n54              try\n55              {\n56                  readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n57                  readerBuffered = new BufferedReader(readerInputStream);\n58  \n59                  \n60                  \n61  \n62                  data = readerBuffered.readLine();\n63              }\n64              catch (IOException exceptIO)\n65              {\n66                  IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n67              }\n68              finally\n69              {\n70                  \n71                  try\n72                  {\n73                      if (readerBuffered != null)\n74                      {\n75                          readerBuffered.close();\n76                      }\n77                  }\n78                  catch (IOException exceptIO)\n79                  {\n80                      IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n81                  }\n82  \n83                  try\n84                  {\n85                      if (readerInputStream != null)\n86                      {\n87                          readerInputStream.close();\n88                      }\n89                  }\n90                  catch (IOException exceptIO)\n91                  {\n92                      IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n93                  }\n94              }\n95          }\n96  \n97          hooSink(data , request, response );\n98      }\n99  \n100      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n101      {\n102          fooxx(request, response);\n103      }\n104  \n105      private void fooxxSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n106      {\n107  \n108          if (data != null)\n109          {\n110              \n111              response.getWriter().println(\"<br>hoo(): data = \" + data);\n112          }\n113  \n114      }\n115  \n116      \n117      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n118      {\n119          String data;\n120  \n121          \n122          data = \"foo\";\n123  \n124          fooxxSink(data , request, response );\n125      }\n126  \n127      \n128  \n129  \n130  \n131  \n132      public static void main(String[] args) throws ClassNotFoundException,\n133             InstantiationException, IllegalAccessException\n134      {\n135          mainFromParent(args);\n136      }\n137  }\n138  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    62,
                    "data"
                ],
                [
                    97,
                    "data"
                ],
                [
                    37,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}