{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_database_68a.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-68a.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: database Read data from a database\n * GoodSource: A hardcoded string\n * BadSink:  Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n * Flow Variant: 68 Data flow: data passed as a member variable in the \"a\" class, which is used by a method in another class in the same package\n *\n * */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_database_68a extends AbstractTestCaseServlet\n{\n    public static String data;\n\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n\n        data = \"\"; /* Initialize data */\n\n        /* Read data from a database */\n        {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n\n            try\n            {\n                /* setup the connection */\n                connection = IO.getDBConnection();\n\n                /* prepare and execute a (hardcoded) query */\n                preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                resultSet = preparedStatement.executeQuery();\n\n                /* POTENTIAL FLAW: Read data from a database query resultset */\n                data = resultSet.getString(1);\n            }\n            catch (SQLException exceptSql)\n            {\n                IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n            }\n            finally\n            {\n                /* Close database objects */\n                try\n                {\n                    if (resultSet != null)\n                    {\n                        resultSet.close();\n                    }\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n                }\n\n                try\n                {\n                    if (preparedStatement != null)\n                    {\n                        preparedStatement.close();\n                    }\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n                }\n\n                try\n                {\n                    if (connection != null)\n                    {\n                        connection.close();\n                    }\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n                }\n            }\n        }\n\n        CWE80_XSS__CWE182_Servlet_database_68b_badSink(request, response);\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n\n        CWE80_XSS__CWE182_Servlet_database_68b_goodG2BSink(request, response);\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public void CWE80_XSS__CWE182_Servlet_database_68b_badSink(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = CWE80_XSS__CWE182_Servlet_database_68a.data;\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE80_XSS__CWE182_Servlet_database_68b_goodG2BSink(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = CWE80_XSS__CWE182_Servlet_database_68a.data;\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s01;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.sql.Connection;\n22  import java.sql.PreparedStatement;\n23  import java.sql.ResultSet;\n24  import java.sql.SQLException;\n25  \n26  import java.util.logging.Level;\n27  \n28  public class CWE80_XSS__CWE182_Servlet_database_68a extends AbstractTestCaseServlet\n29  {\n30      public static String data;\n31  \n32      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n33      {\n34  \n35          data = \"\"; \n36  \n37          \n38          {\n39              Connection connection = null;\n40              PreparedStatement preparedStatement = null;\n41              ResultSet resultSet = null;\n42  \n43              try\n44              {\n45                  \n46                  connection = IO.getDBConnection();\n47  \n48                  \n49                  preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n50                  resultSet = preparedStatement.executeQuery();\n51  \n52                  \n53                  data = resultSet.getString(1);\n54              }\n55              catch (SQLException exceptSql)\n56              {\n57                  IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n58              }\n59              finally\n60              {\n61                  \n62                  try\n63                  {\n64                      if (resultSet != null)\n65                      {\n66                          resultSet.close();\n67                      }\n68                  }\n69                  catch (SQLException exceptSql)\n70                  {\n71                      IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n72                  }\n73  \n74                  try\n75                  {\n76                      if (preparedStatement != null)\n77                      {\n78                          preparedStatement.close();\n79                      }\n80                  }\n81                  catch (SQLException exceptSql)\n82                  {\n83                      IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n84                  }\n85  \n86                  try\n87                  {\n88                      if (connection != null)\n89                      {\n90                          connection.close();\n91                      }\n92                  }\n93                  catch (SQLException exceptSql)\n94                  {\n95                      IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n96                  }\n97              }\n98          }\n99  \n100          CWE80_XSS__CWE182_Servlet_database_68b_hooSink(request, response);\n101      }\n102  \n103      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n104      {\n105          fooxx(request, response);\n106      }\n107  \n108      \n109      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n110      {\n111  \n112          \n113          data = \"foo\";\n114  \n115          CWE80_XSS__CWE182_Servlet_database_68b_fooxxSink(request, response);\n116      }\n117  \n118      \n119  \n120  \n121  \n122  \n123      public static void main(String[] args) throws ClassNotFoundException,\n124             InstantiationException, IllegalAccessException\n125      {\n126          mainFromParent(args);\n127      }\n128      public void CWE80_XSS__CWE182_Servlet_database_68b_hooSink(HttpServletRequest request, HttpServletResponse response) throws Throwable\n129      {\n130          String data = CWE80_XSS__CWE182_Servlet_database_68a.data;\n131          if (data != null)\n132          {\n133              \n134              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n135          }\n136      }\n137      \n138      public void CWE80_XSS__CWE182_Servlet_database_68b_fooxxSink(HttpServletRequest request, HttpServletResponse response) throws Throwable\n139      {\n140          String data = CWE80_XSS__CWE182_Servlet_database_68a.data;\n141          if (data != null)\n142          {\n143              \n144              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n145          }\n146      }\n147  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    53,
                    "data"
                ],
                [
                    134,
                    "data.replaceAll(\"(<script>)\", \"\")"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}