{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_database_16.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-16.tmpl.java\n*/\n/*\n* @description\n* CWE: 80 Cross Site Scripting (XSS)\n* BadSource: database Read data from a database\n* GoodSource: A hardcoded string\n* BadSink:  Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n* Flow Variant: 16 Control flow: while(true)\n*\n* */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_database_16 extends AbstractTestCaseServlet\n{\n    /* uses badsource and badsink */\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        while (true)\n        {\n            data = \"\"; /* Initialize data */\n            /* Read data from a database */\n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try\n                {\n                    /* setup the connection */\n                    connection = IO.getDBConnection();\n                    /* prepare and execute a (hardcoded) query */\n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    /* POTENTIAL FLAW: Read data from a database query resultset */\n                    data = resultSet.getString(1);\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n                }\n                finally\n                {\n                    /* Close database objects */\n                    try\n                    {\n                        if (resultSet != null)\n                        {\n                            resultSet.close();\n                        }\n                    }\n                    catch (SQLException exceptSql)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n                    }\n\n                    try\n                    {\n                        if (preparedStatement != null)\n                        {\n                            preparedStatement.close();\n                        }\n                    }\n                    catch (SQLException exceptSql)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n                    }\n\n                    try\n                    {\n                        if (connection != null)\n                        {\n                            connection.close();\n                        }\n                    }\n                    catch (SQLException exceptSql)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n                    }\n                }\n            }\n            break;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        while (true)\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n            break;\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s01;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.sql.Connection;\n22  import java.sql.PreparedStatement;\n23  import java.sql.ResultSet;\n24  import java.sql.SQLException;\n25  \n26  import java.util.logging.Level;\n27  \n28  public class CWE80_XSS__CWE182_Servlet_database_16 extends AbstractTestCaseServlet\n29  {\n30      \n31      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n32      {\n33          String data;\n34  \n35          while (true)\n36          {\n37              data = \"\"; \n38              \n39              {\n40                  Connection connection = null;\n41                  PreparedStatement preparedStatement = null;\n42                  ResultSet resultSet = null;\n43                  try\n44                  {\n45                      \n46                      connection = IO.getDBConnection();\n47                      \n48                      preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n49                      resultSet = preparedStatement.executeQuery();\n50                      \n51                      data = resultSet.getString(1);\n52                  }\n53                  catch (SQLException exceptSql)\n54                  {\n55                      IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n56                  }\n57                  finally\n58                  {\n59                      \n60                      try\n61                      {\n62                          if (resultSet != null)\n63                          {\n64                              resultSet.close();\n65                          }\n66                      }\n67                      catch (SQLException exceptSql)\n68                      {\n69                          IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n70                      }\n71  \n72                      try\n73                      {\n74                          if (preparedStatement != null)\n75                          {\n76                              preparedStatement.close();\n77                          }\n78                      }\n79                      catch (SQLException exceptSql)\n80                      {\n81                          IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n82                      }\n83  \n84                      try\n85                      {\n86                          if (connection != null)\n87                          {\n88                              connection.close();\n89                          }\n90                      }\n91                      catch (SQLException exceptSql)\n92                      {\n93                          IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n94                      }\n95                  }\n96              }\n97              break;\n98          }\n99  \n100          if (data != null)\n101          {\n102              \n103              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n104          }\n105  \n106      }\n107  \n108      \n109      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n110      {\n111          String data;\n112  \n113          while (true)\n114          {\n115              \n116              data = \"foo\";\n117              break;\n118          }\n119  \n120          if (data != null)\n121          {\n122              \n123              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n124          }\n125  \n126      }\n127  \n128      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n129      {\n130          fooxx(request, response);\n131      }\n132  \n133      \n134  \n135  \n136  \n137  \n138      public static void main(String[] args) throws ClassNotFoundException,\n139             InstantiationException, IllegalAccessException\n140      {\n141          mainFromParent(args);\n142      }\n143  }\n144  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    51,
                    "data"
                ],
                [
                    103,
                    "data.replaceAll(\"(<script>)\", \"\")"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}