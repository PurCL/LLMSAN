{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_connect_tcp_61a.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-61a.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: connect_tcp Read data using an outbound tcp connection\n * GoodSource: A hardcoded string\n * Sinks:\n *    BadSink : Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n * Flow Variant: 61 Data flow: data returned from one method to another in different classes in the same package\n *\n * */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\npublic class CWE80_XSS__CWE182_Servlet_connect_tcp_61a extends AbstractTestCaseServlet\n{\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = CWE80_XSS__CWE182_Servlet_connect_tcp_61b_badSource(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = CWE80_XSS__CWE182_Servlet_connect_tcp_61b_goodG2BSource(request, response);\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public String CWE80_XSS__CWE182_Servlet_connect_tcp_61b_badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        data = \"\"; /* Initialize data */\n        /* Read data using an outbound tcp connection */\n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try\n            {\n                /* Read data using an outbound tcp connection */\n                socket = new Socket(\"host.example.org\", 39544);\n                /* read input from socket */\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                /* POTENTIAL FLAW: Read data using an outbound tcp connection */\n                data = readerBuffered.readLine();\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n            }\n            finally\n            {\n                /* clean up stream reading objects */\n                try\n                {\n                    if (readerBuffered != null)\n                    {\n                        readerBuffered.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                }\n                try\n                {\n                    if (readerInputStream != null)\n                    {\n                        readerInputStream.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                }\n                /* clean up socket objects */\n                try\n                {\n                    if (socket != null)\n                    {\n                        socket.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public String CWE80_XSS__CWE182_Servlet_connect_tcp_61b_goodG2BSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n        return data;\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  package testcases.CWE80_XSS.s01;\n18  import testcasesupport.*;\n19  \n20  import javax.servlet.http.*;\n21  \n22  public class CWE80_XSS__CWE182_Servlet_connect_tcp_61a extends AbstractTestCaseServlet\n23  {\n24      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n25      {\n26          String data = CWE80_XSS__CWE182_Servlet_connect_tcp_61b_hooSource(request, response);\n27  \n28          if (data != null)\n29          {\n30              \n31              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n32          }\n33  \n34      }\n35  \n36      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n37      {\n38          fooxx(request, response);\n39      }\n40  \n41      \n42      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n43      {\n44          String data = CWE80_XSS__CWE182_Servlet_connect_tcp_61b_fooxxSource(request, response);\n45  \n46          if (data != null)\n47          {\n48              \n49              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n50          }\n51  \n52      }\n53  \n54      \n55  \n56  \n57  \n58  \n59      public static void main(String[] args) throws ClassNotFoundException,\n60             InstantiationException, IllegalAccessException\n61      {\n62          mainFromParent(args);\n63      }\n64      public String CWE80_XSS__CWE182_Servlet_connect_tcp_61b_hooSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n65      {\n66          String data;\n67          data = \"\"; \n68          \n69          {\n70              Socket socket = null;\n71              BufferedReader readerBuffered = null;\n72              InputStreamReader readerInputStream = null;\n73              try\n74              {\n75                  \n76                  socket = new Socket(\"host.example.org\", 39544);\n77                  \n78                  readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n79                  readerBuffered = new BufferedReader(readerInputStream);\n80                  \n81                  data = readerBuffered.readLine();\n82              }\n83              catch (IOException exceptIO)\n84              {\n85                  IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n86              }\n87              finally\n88              {\n89                  \n90                  try\n91                  {\n92                      if (readerBuffered != null)\n93                      {\n94                          readerBuffered.close();\n95                      }\n96                  }\n97                  catch (IOException exceptIO)\n98                  {\n99                      IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n100                  }\n101                  try\n102                  {\n103                      if (readerInputStream != null)\n104                      {\n105                          readerInputStream.close();\n106                      }\n107                  }\n108                  catch (IOException exceptIO)\n109                  {\n110                      IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n111                  }\n112                  \n113                  try\n114                  {\n115                      if (socket != null)\n116                      {\n117                          socket.close();\n118                      }\n119                  }\n120                  catch (IOException exceptIO)\n121                  {\n122                      IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n123                  }\n124              }\n125          }\n126          return data;\n127      }\n128      \n129      public String CWE80_XSS__CWE182_Servlet_connect_tcp_61b_fooxxSource(HttpServletRequest request, HttpServletResponse response) throws Throwable\n130      {\n131          String data;\n132          \n133          data = \"foo\";\n134          return data;\n135      }\n136  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    81,
                    "data"
                ],
                [
                    26,
                    "data"
                ],
                [
                    31,
                    "data.replaceAll(\"(<script>)\", \"\""
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}