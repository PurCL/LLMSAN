{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_database_31.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-31.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: database Read data from a database\n * GoodSource: A hardcoded string\n * Sinks:\n *    BadSink : Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n * Flow Variant: 31 Data flow: make a copy of data within the same method\n *\n * */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_database_31 extends AbstractTestCaseServlet\n{\n    /* uses badsource and badsink */\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String dataCopy;\n        {\n            String data;\n\n            data = \"\"; /* Initialize data */\n\n            /* Read data from a database */\n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n\n                try\n                {\n                    /* setup the connection */\n                    connection = IO.getDBConnection();\n\n                    /* prepare and execute a (hardcoded) query */\n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n\n                    /* POTENTIAL FLAW: Read data from a database query resultset */\n                    data = resultSet.getString(1);\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n                }\n                finally\n                {\n                    /* Close database objects */\n                    try\n                    {\n                        if (resultSet != null)\n                        {\n                            resultSet.close();\n                        }\n                    }\n                    catch (SQLException exceptSql)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n                    }\n\n                    try\n                    {\n                        if (preparedStatement != null)\n                        {\n                            preparedStatement.close();\n                        }\n                    }\n                    catch (SQLException exceptSql)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n                    }\n\n                    try\n                    {\n                        if (connection != null)\n                        {\n                            connection.close();\n                        }\n                    }\n                    catch (SQLException exceptSql)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n                    }\n                }\n            }\n\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n\n            if (data != null)\n            {\n                /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n                response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n            }\n\n        }\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String dataCopy;\n        {\n            String data;\n\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n\n            if (data != null)\n            {\n                /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n                response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n            }\n\n        }\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  package testcases.CWE80_XSS.s01;\n18  import testcasesupport.*;\n19  \n20  import javax.servlet.http.*;\n21  \n22  import java.sql.Connection;\n23  import java.sql.PreparedStatement;\n24  import java.sql.ResultSet;\n25  import java.sql.SQLException;\n26  \n27  import java.util.logging.Level;\n28  \n29  public class CWE80_XSS__CWE182_Servlet_database_31 extends AbstractTestCaseServlet\n30  {\n31      \n32      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n33      {\n34          String dataCopy;\n35          {\n36              String data;\n37  \n38              data = \"\"; \n39  \n40              \n41              {\n42                  Connection connection = null;\n43                  PreparedStatement preparedStatement = null;\n44                  ResultSet resultSet = null;\n45  \n46                  try\n47                  {\n48                      \n49                      connection = IO.getDBConnection();\n50  \n51                      \n52                      preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n53                      resultSet = preparedStatement.executeQuery();\n54  \n55                      \n56                      data = resultSet.getString(1);\n57                  }\n58                  catch (SQLException exceptSql)\n59                  {\n60                      IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n61                  }\n62                  finally\n63                  {\n64                      \n65                      try\n66                      {\n67                          if (resultSet != null)\n68                          {\n69                              resultSet.close();\n70                          }\n71                      }\n72                      catch (SQLException exceptSql)\n73                      {\n74                          IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n75                      }\n76  \n77                      try\n78                      {\n79                          if (preparedStatement != null)\n80                          {\n81                              preparedStatement.close();\n82                          }\n83                      }\n84                      catch (SQLException exceptSql)\n85                      {\n86                          IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n87                      }\n88  \n89                      try\n90                      {\n91                          if (connection != null)\n92                          {\n93                              connection.close();\n94                          }\n95                      }\n96                      catch (SQLException exceptSql)\n97                      {\n98                          IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n99                      }\n100                  }\n101              }\n102  \n103              dataCopy = data;\n104          }\n105          {\n106              String data = dataCopy;\n107  \n108              if (data != null)\n109              {\n110                  \n111                  response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n112              }\n113  \n114          }\n115      }\n116  \n117      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n118      {\n119          fooxx(request, response);\n120      }\n121  \n122      \n123      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n124      {\n125          String dataCopy;\n126          {\n127              String data;\n128  \n129              \n130              data = \"foo\";\n131  \n132              dataCopy = data;\n133          }\n134          {\n135              String data = dataCopy;\n136  \n137              if (data != null)\n138              {\n139                  \n140                  response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n141              }\n142  \n143          }\n144      }\n145  \n146      \n147  \n148  \n149  \n150  \n151      public static void main(String[] args) throws ClassNotFoundException,\n152             InstantiationException, IllegalAccessException\n153      {\n154          mainFromParent(args);\n155      }\n156  }\n157  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    56,
                    "data"
                ],
                [
                    103,
                    "data"
                ],
                [
                    111,
                    "data.replaceAll(\"(<script>)\", \"\")"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}