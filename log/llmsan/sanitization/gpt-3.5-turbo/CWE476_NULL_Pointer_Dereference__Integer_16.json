{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__Integer_16.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-16.tmpl.java\n*/\n/*\n* @description\n* CWE: 476 Null Pointer Dereference\n* BadSource:  Set data to null\n* GoodSource: Set data to a non-null value\n* Sinks:\n*    GoodSink: add check to prevent possibility of null dereference\n*    BadSink : possibility of null dereference\n* Flow Variant: 16 Control flow: while(true)\n*\n* */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__Integer_16 extends AbstractTestCase\n{\n    public void bad() throws Throwable\n    {\n        Integer data;\n\n        while (true)\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n            break;\n        }\n\n        while (true)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.toString());\n            break;\n        }\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B() throws Throwable\n    {\n        Integer data;\n\n        while (true)\n        {\n            /* FIX: hardcode data to non-null */\n            data = Integer.valueOf(5);\n            break;\n        }\n\n        while (true)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.toString());\n            break;\n        }\n\n    }\n\n    /* goodB2G() - use badsource and goodsink */\n    private void goodB2G() throws Throwable\n    {\n        Integer data;\n\n        while (true)\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n            break;\n        }\n\n        while (true)\n        {\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.toString());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n            break;\n        }\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B();\n        goodB2G();\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__Integer_16 extends AbstractTestCase\n23  {\n24      public void hoo() throws Throwable\n25      {\n26          Integer data;\n27  \n28          while (true)\n29          {\n30              \n31              data = null;\n32              break;\n33          }\n34  \n35          while (true)\n36          {\n37              \n38              IO.writeLine(\"\" + data.toString());\n39              break;\n40          }\n41      }\n42  \n43      \n44      private void fooxx() throws Throwable\n45      {\n46          Integer data;\n47  \n48          while (true)\n49          {\n50              \n51              data = Integer.valueOf(5);\n52              break;\n53          }\n54  \n55          while (true)\n56          {\n57              \n58              IO.writeLine(\"\" + data.toString());\n59              break;\n60          }\n61  \n62      }\n63  \n64      \n65      private void fooyy() throws Throwable\n66      {\n67          Integer data;\n68  \n69          while (true)\n70          {\n71              \n72              data = null;\n73              break;\n74          }\n75  \n76          while (true)\n77          {\n78              \n79              if (data != null)\n80              {\n81                  IO.writeLine(\"\" + data.toString());\n82              }\n83              else\n84              {\n85                  IO.writeLine(\"data is null\");\n86              }\n87              break;\n88          }\n89      }\n90  \n91      public void foo() throws Throwable\n92      {\n93          fooxx();\n94          fooyy();\n95      }\n96  \n97      \n98  \n99  \n100  \n101  \n102      public static void main(String[] args) throws ClassNotFoundException,\n103             InstantiationException, IllegalAccessException\n104      {\n105          mainFromParent(args);\n106      }\n107  }\n108  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    31,
                    "data"
                ],
                [
                    38,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    72,
                    "data"
                ],
                [
                    81,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    72,
                    "data"
                ],
                [
                    85,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}