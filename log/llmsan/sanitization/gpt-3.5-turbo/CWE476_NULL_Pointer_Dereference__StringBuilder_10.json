{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__StringBuilder_10.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-10.tmpl.java\n*/\n/*\n* @description\n* CWE: 476 Null Pointer Dereference\n* BadSource:  Set data to null\n* GoodSource: Set data to a non-null value\n* Sinks:\n*    GoodSink: add check to prevent possibility of null dereference\n*    BadSink : possibility of null dereference\n* Flow Variant: 10 Control flow: if(IO.staticTrue) and if(IO.staticFalse)\n*\n* */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__StringBuilder_10 extends AbstractTestCase\n{\n    public void bad() throws Throwable\n    {\n        StringBuilder data;\n        if (IO.staticTrue)\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (IO.staticTrue)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.length());\n        }\n    }\n\n    /* goodG2B1() - use goodsource and badsink by changing first IO.staticTrue to IO.staticFalse */\n    private void goodG2B1() throws Throwable\n    {\n        StringBuilder data;\n        if (IO.staticFalse)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        else\n        {\n\n            /* FIX: hardcode data to non-null */\n            data = new StringBuilder();\n\n        }\n\n        if (IO.staticTrue)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.length());\n        }\n    }\n\n    /* goodG2B2() - use goodsource and badsink by reversing statements in first if */\n    private void goodG2B2() throws Throwable\n    {\n        StringBuilder data;\n        if (IO.staticTrue)\n        {\n            /* FIX: hardcode data to non-null */\n            data = new StringBuilder();\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (IO.staticTrue)\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.length());\n        }\n    }\n\n    /* goodB2G1() - use badsource and goodsink by changing second IO.staticTrue to IO.staticFalse */\n    private void goodB2G1() throws Throwable\n    {\n        StringBuilder data;\n        if (IO.staticTrue)\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (IO.staticFalse)\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n            IO.writeLine(\"Benign, fixed string\");\n        }\n        else\n        {\n\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.length());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n\n        }\n    }\n\n    /* goodB2G2() - use badsource and goodsink by reversing statements in second if  */\n    private void goodB2G2() throws Throwable\n    {\n        StringBuilder data;\n        if (IO.staticTrue)\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (IO.staticTrue)\n        {\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.length());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n        }\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B1();\n        goodG2B2();\n        goodB2G1();\n        goodB2G2();\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__StringBuilder_10 extends AbstractTestCase\n23  {\n24      public void hoo() throws Throwable\n25      {\n26          StringBuilder data;\n27          if (IO.staticTrue)\n28          {\n29              \n30              data = null;\n31          }\n32          else\n33          {\n34              \n35  \n36              data = null;\n37          }\n38  \n39          if (IO.staticTrue)\n40          {\n41              \n42              IO.writeLine(\"\" + data.length());\n43          }\n44      }\n45  \n46      \n47      private void fooxx1() throws Throwable\n48      {\n49          StringBuilder data;\n50          if (IO.staticFalse)\n51          {\n52              \n53  \n54              data = null;\n55          }\n56          else\n57          {\n58  \n59              \n60              data = new StringBuilder();\n61  \n62          }\n63  \n64          if (IO.staticTrue)\n65          {\n66              \n67              IO.writeLine(\"\" + data.length());\n68          }\n69      }\n70  \n71      \n72      private void fooxx2() throws Throwable\n73      {\n74          StringBuilder data;\n75          if (IO.staticTrue)\n76          {\n77              \n78              data = new StringBuilder();\n79          }\n80          else\n81          {\n82              \n83  \n84              data = null;\n85          }\n86  \n87          if (IO.staticTrue)\n88          {\n89              \n90              IO.writeLine(\"\" + data.length());\n91          }\n92      }\n93  \n94      \n95      private void fooyy1() throws Throwable\n96      {\n97          StringBuilder data;\n98          if (IO.staticTrue)\n99          {\n100              \n101              data = null;\n102          }\n103          else\n104          {\n105              \n106  \n107              data = null;\n108          }\n109  \n110          if (IO.staticFalse)\n111          {\n112              \n113              IO.writeLine(\"Benign, fixed string\");\n114          }\n115          else\n116          {\n117  \n118              \n119              if (data != null)\n120              {\n121                  IO.writeLine(\"\" + data.length());\n122              }\n123              else\n124              {\n125                  IO.writeLine(\"data is null\");\n126              }\n127  \n128          }\n129      }\n130  \n131      \n132      private void fooyy2() throws Throwable\n133      {\n134          StringBuilder data;\n135          if (IO.staticTrue)\n136          {\n137              \n138              data = null;\n139          }\n140          else\n141          {\n142              \n143  \n144              data = null;\n145          }\n146  \n147          if (IO.staticTrue)\n148          {\n149              \n150              if (data != null)\n151              {\n152                  IO.writeLine(\"\" + data.length());\n153              }\n154              else\n155              {\n156                  IO.writeLine(\"data is null\");\n157              }\n158          }\n159      }\n160  \n161      public void foo() throws Throwable\n162      {\n163          fooxx1();\n164          fooxx2();\n165          fooyy1();\n166          fooyy2();\n167      }\n168  \n169      \n170  \n171  \n172  \n173  \n174      public static void main(String[] args) throws ClassNotFoundException,\n175             InstantiationException, IllegalAccessException\n176      {\n177          mainFromParent(args);\n178      }\n179  }\n180  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    26,
                    "data"
                ],
                [
                    42,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    54,
                    "data"
                ],
                [
                    67,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    84,
                    "data"
                ],
                [
                    90,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    138,
                    "data"
                ],
                [
                    152,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}