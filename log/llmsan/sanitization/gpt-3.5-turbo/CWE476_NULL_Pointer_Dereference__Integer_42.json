{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__Integer_42.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-42.tmpl.java\n*/\n/*\n * @description\n * CWE: 476 Null Pointer Dereference\n * BadSource:  Set data to null\n * GoodSource: Set data to a non-null value\n * Sinks:\n *    GoodSink: add check to prevent possibility of null dereference\n *    BadSink : possibility of null dereference\n * Flow Variant: 42 Data flow: data returned from one method to another in the same class\n *\n * */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__Integer_42 extends AbstractTestCase\n{\n    private Integer badSource() throws Throwable\n    {\n        Integer data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        return data;\n    }\n\n    public void bad() throws Throwable\n    {\n        Integer data = badSource();\n\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.toString());\n\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private Integer goodG2BSource() throws Throwable\n    {\n        Integer data;\n\n        /* FIX: hardcode data to non-null */\n        data = Integer.valueOf(5);\n\n        return data;\n    }\n\n    private void goodG2B() throws Throwable\n    {\n        Integer data = goodG2BSource();\n\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.toString());\n\n    }\n\n    /* goodB2G() - use badsource and goodsink */\n    private Integer goodB2GSource() throws Throwable\n    {\n        Integer data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        return data;\n    }\n\n    private void goodB2G() throws Throwable\n    {\n        Integer data = goodB2GSource();\n\n        /* FIX: validate that data is non-null */\n        if (data != null)\n        {\n            IO.writeLine(\"\" + data.toString());\n        }\n        else\n        {\n            IO.writeLine(\"data is null\");\n        }\n\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B();\n        goodB2G();\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__Integer_42 extends AbstractTestCase\n23  {\n24      private Integer hooSource() throws Throwable\n25      {\n26          Integer data;\n27  \n28          \n29          data = null;\n30  \n31          return data;\n32      }\n33  \n34      public void hoo() throws Throwable\n35      {\n36          Integer data = hooSource();\n37  \n38          \n39          IO.writeLine(\"\" + data.toString());\n40  \n41      }\n42  \n43      \n44      private Integer fooxxSource() throws Throwable\n45      {\n46          Integer data;\n47  \n48          \n49          data = Integer.valueOf(5);\n50  \n51          return data;\n52      }\n53  \n54      private void fooxx() throws Throwable\n55      {\n56          Integer data = fooxxSource();\n57  \n58          \n59          IO.writeLine(\"\" + data.toString());\n60  \n61      }\n62  \n63      \n64      private Integer fooyySource() throws Throwable\n65      {\n66          Integer data;\n67  \n68          \n69          data = null;\n70  \n71          return data;\n72      }\n73  \n74      private void fooyy() throws Throwable\n75      {\n76          Integer data = fooyySource();\n77  \n78          \n79          if (data != null)\n80          {\n81              IO.writeLine(\"\" + data.toString());\n82          }\n83          else\n84          {\n85              IO.writeLine(\"data is null\");\n86          }\n87  \n88      }\n89  \n90      public void foo() throws Throwable\n91      {\n92          fooxx();\n93          fooyy();\n94      }\n95  \n96      \n97  \n98  \n99  \n100  \n101      public static void main(String[] args) throws ClassNotFoundException,\n102             InstantiationException, IllegalAccessException\n103      {\n104          mainFromParent(args);\n105      }\n106  }\n107  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    29,
                    "data"
                ],
                [
                    36,
                    "data"
                ],
                [
                    39,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    69,
                    "data"
                ],
                [
                    76,
                    "data"
                ],
                [
                    81,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}