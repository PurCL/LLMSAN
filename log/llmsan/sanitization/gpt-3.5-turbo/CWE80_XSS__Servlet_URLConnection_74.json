{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__Servlet_URLConnection_74a.java\nLabel Definition File: CWE80_XSS__Servlet.label.xml\nTemplate File: sources-sink-74a.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: URLConnection Read data from a web server with URLConnection\n * GoodSource: A hardcoded string\n * Sinks:\n *    BadSink : Display of data in web page without any encoding or validation\n * Flow Variant: 74 Data flow: data passed in a HashMap from one method to another in different source files in the same package\n *\n * */\n\npackage testcases.CWE80_XSS.s02;\nimport testcasesupport.*;\nimport java.util.HashMap;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__Servlet_URLConnection_74a extends AbstractTestCaseServlet\n{\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        data = \"\"; /* Initialize data */\n\n        /* read input from URLConnection */\n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n\n            try\n            {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n\n                /* POTENTIAL FLAW: Read data from a web server with URLConnection */\n                /* This will be reading the first \"line\" of the response body,\n                 * which could be very long if there are no newlines in the HTML */\n                data = readerBuffered.readLine();\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n            }\n            finally\n            {\n                /* clean up stream reading objects */\n                try\n                {\n                    if (readerBuffered != null)\n                    {\n                        readerBuffered.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                }\n\n                try\n                {\n                    if (readerInputStream != null)\n                    {\n                        readerInputStream.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                }\n            }\n        }\n\n        HashMap<Integer,String> dataHashMap = new HashMap<Integer,String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        CWE80_XSS__Servlet_URLConnection_74b_badSink(dataHashMap , request, response );\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n\n        HashMap<Integer,String> dataHashMap = new HashMap<Integer,String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        CWE80_XSS__Servlet_URLConnection_74b_goodG2BSink(dataHashMap , request, response );\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public void CWE80_XSS__Servlet_URLConnection_74b_badSink(HashMap<Integer,String> dataHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = dataHashMap.get(2);\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE80_XSS__Servlet_URLConnection_74b_goodG2BSink(HashMap<Integer,String> dataHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data = dataHashMap.get(2);\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page without any encoding or validation */\n            response.getWriter().println(\"<br>bad(): data = \" + data);\n        }\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  package testcases.CWE80_XSS.s02;\n18  import testcasesupport.*;\n19  import java.util.HashMap;\n20  \n21  import javax.servlet.http.*;\n22  \n23  import java.io.BufferedReader;\n24  import java.io.InputStreamReader;\n25  import java.io.IOException;\n26  import java.net.URL;\n27  import java.net.URLConnection;\n28  \n29  import java.util.logging.Level;\n30  \n31  public class CWE80_XSS__Servlet_URLConnection_74a extends AbstractTestCaseServlet\n32  {\n33      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n34      {\n35          String data;\n36  \n37          data = \"\"; \n38  \n39          \n40          {\n41              URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n42              BufferedReader readerBuffered = null;\n43              InputStreamReader readerInputStream = null;\n44  \n45              try\n46              {\n47                  readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n48                  readerBuffered = new BufferedReader(readerInputStream);\n49  \n50                  \n51                  \n52  \n53                  data = readerBuffered.readLine();\n54              }\n55              catch (IOException exceptIO)\n56              {\n57                  IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n58              }\n59              finally\n60              {\n61                  \n62                  try\n63                  {\n64                      if (readerBuffered != null)\n65                      {\n66                          readerBuffered.close();\n67                      }\n68                  }\n69                  catch (IOException exceptIO)\n70                  {\n71                      IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n72                  }\n73  \n74                  try\n75                  {\n76                      if (readerInputStream != null)\n77                      {\n78                          readerInputStream.close();\n79                      }\n80                  }\n81                  catch (IOException exceptIO)\n82                  {\n83                      IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n84                  }\n85              }\n86          }\n87  \n88          HashMap<Integer,String> dataHashMap = new HashMap<Integer,String>();\n89          dataHashMap.put(0, data);\n90          dataHashMap.put(1, data);\n91          dataHashMap.put(2, data);\n92          CWE80_XSS__Servlet_URLConnection_74b_hooSink(dataHashMap , request, response );\n93      }\n94  \n95      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n96      {\n97          fooxx(request, response);\n98      }\n99  \n100      \n101      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n102      {\n103          String data;\n104  \n105          \n106          data = \"foo\";\n107  \n108          HashMap<Integer,String> dataHashMap = new HashMap<Integer,String>();\n109          dataHashMap.put(0, data);\n110          dataHashMap.put(1, data);\n111          dataHashMap.put(2, data);\n112          CWE80_XSS__Servlet_URLConnection_74b_fooxxSink(dataHashMap , request, response );\n113      }\n114  \n115      \n116  \n117  \n118  \n119  \n120      public static void main(String[] args) throws ClassNotFoundException,\n121             InstantiationException, IllegalAccessException\n122      {\n123          mainFromParent(args);\n124      }\n125      public void CWE80_XSS__Servlet_URLConnection_74b_hooSink(HashMap<Integer,String> dataHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable\n126      {\n127          String data = dataHashMap.get(2);\n128          if (data != null)\n129          {\n130              \n131              response.getWriter().println(\"<br>hoo(): data = \" + data);\n132          }\n133      }\n134      \n135      public void CWE80_XSS__Servlet_URLConnection_74b_fooxxSink(HashMap<Integer,String> dataHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable\n136      {\n137          String data = dataHashMap.get(2);\n138          if (data != null)\n139          {\n140              \n141              response.getWriter().println(\"<br>hoo(): data = \" + data);\n142          }\n143      }\n144  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    53,
                    "data"
                ],
                [
                    92,
                    "data"
                ],
                [
                    131,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}