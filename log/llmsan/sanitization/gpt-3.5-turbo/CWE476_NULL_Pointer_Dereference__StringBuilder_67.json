{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__StringBuilder_67a.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-67a.tmpl.java\n*/\n/*\n * @description\n * CWE: 476 Null Pointer Dereference\n * BadSource:  Set data to null\n * GoodSource: Set data to a non-null value\n * Sinks:\n *    GoodSink: add check to prevent possibility of null dereference\n *    BadSink : possibility of null dereference\n * Flow Variant: 67 Data flow: data passed in a class from one method to another in different source files in the same package\n *\n * */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__StringBuilder_67a extends AbstractTestCase\n{\n    static class Container\n    {\n        public StringBuilder containerOne;\n    }\n\n    public void bad() throws Throwable\n    {\n        StringBuilder data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        CWE476_NULL_Pointer_Dereference__StringBuilder_67b_badSink(dataContainer  );\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B();\n        goodB2G();\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B() throws Throwable\n    {\n        StringBuilder data;\n\n        /* FIX: hardcode data to non-null */\n        data = new StringBuilder();\n\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        CWE476_NULL_Pointer_Dereference__StringBuilder_67b_goodG2BSink(dataContainer  );\n    }\n\n    /* goodB2G() - use badsource and goodsink */\n    private void goodB2G() throws Throwable\n    {\n        StringBuilder data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        CWE476_NULL_Pointer_Dereference__StringBuilder_67b_goodB2GSink(dataContainer  );\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_67b_badSink(CWE476_NULL_Pointer_Dereference__StringBuilder_67a.Container dataContainer ) throws Throwable\n    {\n        StringBuilder data = dataContainer.containerOne;\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.length());\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_67b_goodG2BSink(CWE476_NULL_Pointer_Dereference__StringBuilder_67a.Container dataContainer ) throws Throwable\n    {\n        StringBuilder data = dataContainer.containerOne;\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.length());\n    }\n    /* goodB2G() - use badsource and goodsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_67b_goodB2GSink(CWE476_NULL_Pointer_Dereference__StringBuilder_67a.Container dataContainer ) throws Throwable\n    {\n        StringBuilder data = dataContainer.containerOne;\n        /* FIX: validate that data is non-null */\n        if (data != null)\n        {\n            IO.writeLine(\"\" + data.length());\n        }\n        else\n        {\n            IO.writeLine(\"data is null\");\n        }\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__StringBuilder_67a extends AbstractTestCase\n23  {\n24      static class Container\n25      {\n26          public StringBuilder containerOne;\n27      }\n28  \n29      public void hoo() throws Throwable\n30      {\n31          StringBuilder data;\n32  \n33          \n34          data = null;\n35  \n36          Container dataContainer = new Container();\n37          dataContainer.containerOne = data;\n38          CWE476_NULL_Pointer_Dereference__StringBuilder_67b_hooSink(dataContainer  );\n39      }\n40  \n41      public void foo() throws Throwable\n42      {\n43          fooxx();\n44          fooyy();\n45      }\n46  \n47      \n48      private void fooxx() throws Throwable\n49      {\n50          StringBuilder data;\n51  \n52          \n53          data = new StringBuilder();\n54  \n55          Container dataContainer = new Container();\n56          dataContainer.containerOne = data;\n57          CWE476_NULL_Pointer_Dereference__StringBuilder_67b_fooxxSink(dataContainer  );\n58      }\n59  \n60      \n61      private void fooyy() throws Throwable\n62      {\n63          StringBuilder data;\n64  \n65          \n66          data = null;\n67  \n68          Container dataContainer = new Container();\n69          dataContainer.containerOne = data;\n70          CWE476_NULL_Pointer_Dereference__StringBuilder_67b_fooyySink(dataContainer  );\n71      }\n72  \n73      \n74  \n75  \n76  \n77  \n78      public static void main(String[] args) throws ClassNotFoundException,\n79             InstantiationException, IllegalAccessException\n80      {\n81          mainFromParent(args);\n82      }\n83  \n84      public void CWE476_NULL_Pointer_Dereference__StringBuilder_67b_hooSink(CWE476_NULL_Pointer_Dereference__StringBuilder_67a.Container dataContainer ) throws Throwable\n85      {\n86          StringBuilder data = dataContainer.containerOne;\n87          \n88          IO.writeLine(\"\" + data.length());\n89      }\n90      \n91      public void CWE476_NULL_Pointer_Dereference__StringBuilder_67b_fooxxSink(CWE476_NULL_Pointer_Dereference__StringBuilder_67a.Container dataContainer ) throws Throwable\n92      {\n93          StringBuilder data = dataContainer.containerOne;\n94          \n95          IO.writeLine(\"\" + data.length());\n96      }\n97      \n98      public void CWE476_NULL_Pointer_Dereference__StringBuilder_67b_fooyySink(CWE476_NULL_Pointer_Dereference__StringBuilder_67a.Container dataContainer ) throws Throwable\n99      {\n100          StringBuilder data = dataContainer.containerOne;\n101          \n102          if (data != null)\n103          {\n104              IO.writeLine(\"\" + data.length());\n105          }\n106          else\n107          {\n108              IO.writeLine(\"data is null\");\n109          }\n110      }\n111  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    34,
                    "data"
                ],
                [
                    37,
                    "data"
                ],
                [
                    84,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    66,
                    "data"
                ],
                [
                    69,
                    "data"
                ],
                [
                    98,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    53,
                    "data"
                ],
                [
                    56,
                    "data"
                ],
                [
                    91,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}