{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_database_75a.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-75a.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: database Read data from a database\n * GoodSource: A hardcoded string\n * Sinks:\n *    BadSink : Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n * Flow Variant: 75 Data flow: data passed in a serialized object from one method to another in different source files in the same package\n *\n * */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\nimport javax.servlet.http.*;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n\npublic class CWE80_XSS__CWE182_Servlet_database_75a extends AbstractTestCaseServlet\n{\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        data = \"\"; /* Initialize data */\n\n        /* Read data from a database */\n        {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n\n            try\n            {\n                /* setup the connection */\n                connection = IO.getDBConnection();\n\n                /* prepare and execute a (hardcoded) query */\n                preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                resultSet = preparedStatement.executeQuery();\n\n                /* POTENTIAL FLAW: Read data from a database query resultset */\n                data = resultSet.getString(1);\n            }\n            catch (SQLException exceptSql)\n            {\n                IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n            }\n            finally\n            {\n                /* Close database objects */\n                try\n                {\n                    if (resultSet != null)\n                    {\n                        resultSet.close();\n                    }\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n                }\n\n                try\n                {\n                    if (preparedStatement != null)\n                    {\n                        preparedStatement.close();\n                    }\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n                }\n\n                try\n                {\n                    if (connection != null)\n                    {\n                        connection.close();\n                    }\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n                }\n            }\n        }\n\n        /* serialize data to a byte array */\n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n\n        try\n        {\n            streamByteArrayOutput = new ByteArrayOutputStream() ;\n            outputObject = new ObjectOutputStream(streamByteArrayOutput) ;\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            CWE80_XSS__CWE182_Servlet_database_75b_badSink(dataSerialized , request, response );\n        }\n        catch (IOException exceptIO)\n        {\n            IO.logger.log(Level.WARNING, \"IOException in serialization\", exceptIO);\n        }\n        finally\n        {\n            /* clean up stream writing objects */\n            try\n            {\n                if (outputObject != null)\n                {\n                    outputObject.close();\n                }\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error closing ObjectOutputStream\", exceptIO);\n            }\n\n            try\n            {\n                if (streamByteArrayOutput != null)\n                {\n                    streamByteArrayOutput.close();\n                }\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error closing ByteArrayOutputStream\", exceptIO);\n            }\n        }\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n\n        /* serialize data to a byte array */\n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n\n        try\n        {\n            streamByteArrayOutput = new ByteArrayOutputStream() ;\n            outputObject = new ObjectOutputStream(streamByteArrayOutput) ;\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            CWE80_XSS__CWE182_Servlet_database_75b_goodG2BSink(dataSerialized , request, response );\n        }\n        catch (IOException exceptIO)\n        {\n            IO.logger.log(Level.WARNING, \"IOException in serialization\", exceptIO);\n        }\n        finally\n        {\n            /* clean up stream writing objects */\n            try\n            {\n                if (outputObject != null)\n                {\n                    outputObject.close();\n                }\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error closing ObjectOutputStream\", exceptIO);\n            }\n\n            try\n            {\n                if (streamByteArrayOutput != null)\n                {\n                    streamByteArrayOutput.close();\n                }\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error closing ByteArrayOutputStream\", exceptIO);\n            }\n        }\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public void CWE80_XSS__CWE182_Servlet_database_75b_badSink(byte[] dataSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        /* unserialize data */\n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try\n        {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String)streamObjectInput.readObject();\n            if (data != null)\n            {\n                /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n                response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n            }\n        }\n        catch (IOException exceptIO)\n        {\n            IO.logger.log(Level.WARNING, \"IOException in deserialization\", exceptIO);\n        }\n        catch (ClassNotFoundException exceptClassNotFound)\n        {\n            IO.logger.log(Level.WARNING, \"ClassNotFoundException in deserialization\", exceptClassNotFound);\n        }\n        finally\n        {\n            /* clean up stream reading objects */\n            try\n            {\n                if (streamObjectInput != null)\n                {\n                    streamObjectInput.close();\n                }\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error closing ObjectInputStream\", exceptIO);\n            }\n            try\n            {\n                if (streamByteArrayInput != null)\n                {\n                    streamByteArrayInput.close();\n                }\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error closing ByteArrayInputStream\", exceptIO);\n            }\n        }\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE80_XSS__CWE182_Servlet_database_75b_goodG2BSink(byte[] dataSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        /* unserialize data */\n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try\n        {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String)streamObjectInput.readObject();\n            if (data != null)\n            {\n                /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n                response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n            }\n        }\n        catch (IOException exceptIO)\n        {\n            IO.logger.log(Level.WARNING, \"IOException in deserialization\", exceptIO);\n        }\n        catch (ClassNotFoundException exceptClassNotFound)\n        {\n            IO.logger.log(Level.WARNING, \"ClassNotFoundException in deserialization\", exceptClassNotFound);\n        }\n        finally\n        {\n            /* clean up stream reading objects */\n            try\n            {\n                if (streamObjectInput != null)\n                {\n                    streamObjectInput.close();\n                }\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error closing ObjectInputStream\", exceptIO);\n            }\n            try\n            {\n                if (streamByteArrayInput != null)\n                {\n                    streamByteArrayInput.close();\n                }\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error closing ByteArrayInputStream\", exceptIO);\n            }\n        }\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  package testcases.CWE80_XSS.s01;\n18  import testcasesupport.*;\n19  import java.io.ByteArrayOutputStream;\n20  import java.io.ObjectOutput;\n21  import java.io.ObjectOutputStream;\n22  import java.io.IOException;\n23  import java.util.logging.Level;\n24  \n25  import javax.servlet.http.*;\n26  \n27  import java.sql.Connection;\n28  import java.sql.PreparedStatement;\n29  import java.sql.ResultSet;\n30  import java.sql.SQLException;\n31  \n32  \n33  public class CWE80_XSS__CWE182_Servlet_database_75a extends AbstractTestCaseServlet\n34  {\n35      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n36      {\n37          String data;\n38  \n39          data = \"\"; \n40  \n41          \n42          {\n43              Connection connection = null;\n44              PreparedStatement preparedStatement = null;\n45              ResultSet resultSet = null;\n46  \n47              try\n48              {\n49                  \n50                  connection = IO.getDBConnection();\n51  \n52                  \n53                  preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n54                  resultSet = preparedStatement.executeQuery();\n55  \n56                  \n57                  data = resultSet.getString(1);\n58              }\n59              catch (SQLException exceptSql)\n60              {\n61                  IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n62              }\n63              finally\n64              {\n65                  \n66                  try\n67                  {\n68                      if (resultSet != null)\n69                      {\n70                          resultSet.close();\n71                      }\n72                  }\n73                  catch (SQLException exceptSql)\n74                  {\n75                      IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n76                  }\n77  \n78                  try\n79                  {\n80                      if (preparedStatement != null)\n81                      {\n82                          preparedStatement.close();\n83                      }\n84                  }\n85                  catch (SQLException exceptSql)\n86                  {\n87                      IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n88                  }\n89  \n90                  try\n91                  {\n92                      if (connection != null)\n93                      {\n94                          connection.close();\n95                      }\n96                  }\n97                  catch (SQLException exceptSql)\n98                  {\n99                      IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n100                  }\n101              }\n102          }\n103  \n104          \n105          ByteArrayOutputStream streamByteArrayOutput = null;\n106          ObjectOutput outputObject = null;\n107  \n108          try\n109          {\n110              streamByteArrayOutput = new ByteArrayOutputStream() ;\n111              outputObject = new ObjectOutputStream(streamByteArrayOutput) ;\n112              outputObject.writeObject(data);\n113              byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n114              CWE80_XSS__CWE182_Servlet_database_75b_hooSink(dataSerialized , request, response );\n115          }\n116          catch (IOException exceptIO)\n117          {\n118              IO.logger.log(Level.WARNING, \"IOException in serialization\", exceptIO);\n119          }\n120          finally\n121          {\n122              \n123              try\n124              {\n125                  if (outputObject != null)\n126                  {\n127                      outputObject.close();\n128                  }\n129              }\n130              catch (IOException exceptIO)\n131              {\n132                  IO.logger.log(Level.WARNING, \"Error closing ObjectOutputStream\", exceptIO);\n133              }\n134  \n135              try\n136              {\n137                  if (streamByteArrayOutput != null)\n138                  {\n139                      streamByteArrayOutput.close();\n140                  }\n141              }\n142              catch (IOException exceptIO)\n143              {\n144                  IO.logger.log(Level.WARNING, \"Error closing ByteArrayOutputStream\", exceptIO);\n145              }\n146          }\n147      }\n148  \n149      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n150      {\n151          fooxx(request, response);\n152      }\n153  \n154      \n155      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n156      {\n157          String data;\n158  \n159          \n160          data = \"foo\";\n161  \n162          \n163          ByteArrayOutputStream streamByteArrayOutput = null;\n164          ObjectOutput outputObject = null;\n165  \n166          try\n167          {\n168              streamByteArrayOutput = new ByteArrayOutputStream() ;\n169              outputObject = new ObjectOutputStream(streamByteArrayOutput) ;\n170              outputObject.writeObject(data);\n171              byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n172              CWE80_XSS__CWE182_Servlet_database_75b_fooxxSink(dataSerialized , request, response );\n173          }\n174          catch (IOException exceptIO)\n175          {\n176              IO.logger.log(Level.WARNING, \"IOException in serialization\", exceptIO);\n177          }\n178          finally\n179          {\n180              \n181              try\n182              {\n183                  if (outputObject != null)\n184                  {\n185                      outputObject.close();\n186                  }\n187              }\n188              catch (IOException exceptIO)\n189              {\n190                  IO.logger.log(Level.WARNING, \"Error closing ObjectOutputStream\", exceptIO);\n191              }\n192  \n193              try\n194              {\n195                  if (streamByteArrayOutput != null)\n196                  {\n197                      streamByteArrayOutput.close();\n198                  }\n199              }\n200              catch (IOException exceptIO)\n201              {\n202                  IO.logger.log(Level.WARNING, \"Error closing ByteArrayOutputStream\", exceptIO);\n203              }\n204          }\n205      }\n206  \n207      \n208  \n209  \n210  \n211  \n212      public static void main(String[] args) throws ClassNotFoundException,\n213             InstantiationException, IllegalAccessException\n214      {\n215          mainFromParent(args);\n216      }\n217      public void CWE80_XSS__CWE182_Servlet_database_75b_hooSink(byte[] dataSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable\n218      {\n219          \n220          ByteArrayInputStream streamByteArrayInput = null;\n221          ObjectInputStream streamObjectInput = null;\n222          try\n223          {\n224              streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n225              streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n226              String data = (String)streamObjectInput.readObject();\n227              if (data != null)\n228              {\n229                  \n230                  response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n231              }\n232          }\n233          catch (IOException exceptIO)\n234          {\n235              IO.logger.log(Level.WARNING, \"IOException in deserialization\", exceptIO);\n236          }\n237          catch (ClassNotFoundException exceptClassNotFound)\n238          {\n239              IO.logger.log(Level.WARNING, \"ClassNotFoundException in deserialization\", exceptClassNotFound);\n240          }\n241          finally\n242          {\n243              \n244              try\n245              {\n246                  if (streamObjectInput != null)\n247                  {\n248                      streamObjectInput.close();\n249                  }\n250              }\n251              catch (IOException exceptIO)\n252              {\n253                  IO.logger.log(Level.WARNING, \"Error closing ObjectInputStream\", exceptIO);\n254              }\n255              try\n256              {\n257                  if (streamByteArrayInput != null)\n258                  {\n259                      streamByteArrayInput.close();\n260                  }\n261              }\n262              catch (IOException exceptIO)\n263              {\n264                  IO.logger.log(Level.WARNING, \"Error closing ByteArrayInputStream\", exceptIO);\n265              }\n266          }\n267      }\n268      \n269      public void CWE80_XSS__CWE182_Servlet_database_75b_fooxxSink(byte[] dataSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable\n270      {\n271          \n272          ByteArrayInputStream streamByteArrayInput = null;\n273          ObjectInputStream streamObjectInput = null;\n274          try\n275          {\n276              streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n277              streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n278              String data = (String)streamObjectInput.readObject();\n279              if (data != null)\n280              {\n281                  \n282                  response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n283              }\n284          }\n285          catch (IOException exceptIO)\n286          {\n287              IO.logger.log(Level.WARNING, \"IOException in deserialization\", exceptIO);\n288          }\n289          catch (ClassNotFoundException exceptClassNotFound)\n290          {\n291              IO.logger.log(Level.WARNING, \"ClassNotFoundException in deserialization\", exceptClassNotFound);\n292          }\n293          finally\n294          {\n295              \n296              try\n297              {\n298                  if (streamObjectInput != null)\n299                  {\n300                      streamObjectInput.close();\n301                  }\n302              }\n303              catch (IOException exceptIO)\n304              {\n305                  IO.logger.log(Level.WARNING, \"Error closing ObjectInputStream\", exceptIO);\n306              }\n307              try\n308              {\n309                  if (streamByteArrayInput != null)\n310                  {\n311                      streamByteArrayInput.close();\n312                  }\n313              }\n314              catch (IOException exceptIO)\n315              {\n316                  IO.logger.log(Level.WARNING, \"Error closing ByteArrayInputStream\", exceptIO);\n317              }\n318          }\n319      }\n320  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    57,
                    "data"
                ],
                [
                    114,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    161,
                    "data"
                ],
                [
                    172,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        }
    ]
}