{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__StringBuilder_68a.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-68a.tmpl.java\n*/\n/*\n * @description\n * CWE: 476 Null Pointer Dereference\n * BadSource:  Set data to null\n * GoodSource: Set data to a non-null value\n * Sinks:\n *    GoodSink: add check to prevent possibility of null dereference\n *    BadSink : possibility of null dereference\n * Flow Variant: 68 Data flow: data passed as a member variable in the \"a\" class, which is used by a method in another class in the same package\n *\n * */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__StringBuilder_68a extends AbstractTestCase\n{\n    public static StringBuilder data;\n\n    public void bad() throws Throwable\n    {\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        CWE476_NULL_Pointer_Dereference__StringBuilder_68b_badSink();\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B();\n        goodB2G();\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B() throws Throwable\n    {\n\n        /* FIX: hardcode data to non-null */\n        data = new StringBuilder();\n\n        CWE476_NULL_Pointer_Dereference__StringBuilder_68b_goodG2BSink();\n    }\n\n    /* goodB2G() - use badsource and goodsink */\n    private void goodB2G() throws Throwable\n    {\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        CWE476_NULL_Pointer_Dereference__StringBuilder_68b_goodB2GSink();\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_68b_badSink() throws Throwable\n    {\n        StringBuilder data = CWE476_NULL_Pointer_Dereference__StringBuilder_68a.data;\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.length());\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_68b_goodG2BSink() throws Throwable\n    {\n        StringBuilder data = CWE476_NULL_Pointer_Dereference__StringBuilder_68a.data;\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.length());\n    }\n    /* goodB2G() - use badsource and goodsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_68b_goodB2GSink() throws Throwable\n    {\n        StringBuilder data = CWE476_NULL_Pointer_Dereference__StringBuilder_68a.data;\n        /* FIX: validate that data is non-null */\n        if (data != null)\n        {\n            IO.writeLine(\"\" + data.length());\n        }\n        else\n        {\n            IO.writeLine(\"data is null\");\n        }\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__StringBuilder_68a extends AbstractTestCase\n23  {\n24      public static StringBuilder data;\n25  \n26      public void hoo() throws Throwable\n27      {\n28  \n29          \n30          data = null;\n31  \n32          CWE476_NULL_Pointer_Dereference__StringBuilder_68b_hooSink();\n33      }\n34  \n35      public void foo() throws Throwable\n36      {\n37          fooxx();\n38          fooyy();\n39      }\n40  \n41      \n42      private void fooxx() throws Throwable\n43      {\n44  \n45          \n46          data = new StringBuilder();\n47  \n48          CWE476_NULL_Pointer_Dereference__StringBuilder_68b_fooxxSink();\n49      }\n50  \n51      \n52      private void fooyy() throws Throwable\n53      {\n54  \n55          \n56          data = null;\n57  \n58          CWE476_NULL_Pointer_Dereference__StringBuilder_68b_fooyySink();\n59      }\n60  \n61      \n62  \n63  \n64  \n65  \n66      public static void main(String[] args) throws ClassNotFoundException,\n67             InstantiationException, IllegalAccessException\n68      {\n69          mainFromParent(args);\n70      }\n71      public void CWE476_NULL_Pointer_Dereference__StringBuilder_68b_hooSink() throws Throwable\n72      {\n73          StringBuilder data = CWE476_NULL_Pointer_Dereference__StringBuilder_68a.data;\n74          \n75          IO.writeLine(\"\" + data.length());\n76      }\n77      \n78      public void CWE476_NULL_Pointer_Dereference__StringBuilder_68b_fooxxSink() throws Throwable\n79      {\n80          StringBuilder data = CWE476_NULL_Pointer_Dereference__StringBuilder_68a.data;\n81          \n82          IO.writeLine(\"\" + data.length());\n83      }\n84      \n85      public void CWE476_NULL_Pointer_Dereference__StringBuilder_68b_fooyySink() throws Throwable\n86      {\n87          StringBuilder data = CWE476_NULL_Pointer_Dereference__StringBuilder_68a.data;\n88          \n89          if (data != null)\n90          {\n91              IO.writeLine(\"\" + data.length());\n92          }\n93          else\n94          {\n95              IO.writeLine(\"data is null\");\n96          }\n97      }\n98  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    30,
                    "data"
                ],
                [
                    73,
                    "data"
                ],
                [
                    75,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    56,
                    "data"
                ],
                [
                    87,
                    "data"
                ],
                [
                    91,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}