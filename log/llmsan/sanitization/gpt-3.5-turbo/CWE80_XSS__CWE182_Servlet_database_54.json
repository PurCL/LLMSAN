{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_database_54a.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-54a.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: database Read data from a database\n * GoodSource: A hardcoded string\n * Sinks:\n *    BadSink : Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n * Flow Variant: 54 Data flow: data passed as an argument from one method through three others to a fifth; all five functions are in different classes in the same package\n *\n * */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_database_54a extends AbstractTestCaseServlet\n{\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        data = \"\"; /* Initialize data */\n\n        /* Read data from a database */\n        {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n\n            try\n            {\n                /* setup the connection */\n                connection = IO.getDBConnection();\n\n                /* prepare and execute a (hardcoded) query */\n                preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                resultSet = preparedStatement.executeQuery();\n\n                /* POTENTIAL FLAW: Read data from a database query resultset */\n                data = resultSet.getString(1);\n            }\n            catch (SQLException exceptSql)\n            {\n                IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n            }\n            finally\n            {\n                /* Close database objects */\n                try\n                {\n                    if (resultSet != null)\n                    {\n                        resultSet.close();\n                    }\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n                }\n\n                try\n                {\n                    if (preparedStatement != null)\n                    {\n                        preparedStatement.close();\n                    }\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n                }\n\n                try\n                {\n                    if (connection != null)\n                    {\n                        connection.close();\n                    }\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n                }\n            }\n        }\n\n        CWE80_XSS__CWE182_Servlet_database_54b_badSink(data , request, response);\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n\n        CWE80_XSS__CWE182_Servlet_database_54b_goodG2BSink(data , request, response);\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public void CWE80_XSS__CWE182_Servlet_database_54b_badSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        CWE80_XSS__CWE182_Servlet_database_54c_badSink(data , request, response);\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE80_XSS__CWE182_Servlet_database_54b_goodG2BSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        CWE80_XSS__CWE182_Servlet_database_54c_goodG2BSink(data , request, response);\n    }\n    public void CWE80_XSS__CWE182_Servlet_database_54c_badSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        CWE80_XSS__CWE182_Servlet_database_54d_badSink(data , request, response);\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE80_XSS__CWE182_Servlet_database_54c_goodG2BSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        CWE80_XSS__CWE182_Servlet_database_54d_goodG2BSink(data , request, response);\n    }\n    public void CWE80_XSS__CWE182_Servlet_database_54d_badSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        CWE80_XSS__CWE182_Servlet_database_54e_badSink(data , request, response);\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE80_XSS__CWE182_Servlet_database_54d_goodG2BSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        CWE80_XSS__CWE182_Servlet_database_54e_goodG2BSink(data , request, response);\n    }\n    public void CWE80_XSS__CWE182_Servlet_database_54e_badSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE80_XSS__CWE182_Servlet_database_54e_goodG2BSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  package testcases.CWE80_XSS.s01;\n18  import testcasesupport.*;\n19  \n20  import javax.servlet.http.*;\n21  \n22  import java.sql.Connection;\n23  import java.sql.PreparedStatement;\n24  import java.sql.ResultSet;\n25  import java.sql.SQLException;\n26  \n27  import java.util.logging.Level;\n28  \n29  public class CWE80_XSS__CWE182_Servlet_database_54a extends AbstractTestCaseServlet\n30  {\n31      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n32      {\n33          String data;\n34  \n35          data = \"\"; \n36  \n37          \n38          {\n39              Connection connection = null;\n40              PreparedStatement preparedStatement = null;\n41              ResultSet resultSet = null;\n42  \n43              try\n44              {\n45                  \n46                  connection = IO.getDBConnection();\n47  \n48                  \n49                  preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n50                  resultSet = preparedStatement.executeQuery();\n51  \n52                  \n53                  data = resultSet.getString(1);\n54              }\n55              catch (SQLException exceptSql)\n56              {\n57                  IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n58              }\n59              finally\n60              {\n61                  \n62                  try\n63                  {\n64                      if (resultSet != null)\n65                      {\n66                          resultSet.close();\n67                      }\n68                  }\n69                  catch (SQLException exceptSql)\n70                  {\n71                      IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n72                  }\n73  \n74                  try\n75                  {\n76                      if (preparedStatement != null)\n77                      {\n78                          preparedStatement.close();\n79                      }\n80                  }\n81                  catch (SQLException exceptSql)\n82                  {\n83                      IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n84                  }\n85  \n86                  try\n87                  {\n88                      if (connection != null)\n89                      {\n90                          connection.close();\n91                      }\n92                  }\n93                  catch (SQLException exceptSql)\n94                  {\n95                      IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n96                  }\n97              }\n98          }\n99  \n100          CWE80_XSS__CWE182_Servlet_database_54b_hooSink(data , request, response);\n101      }\n102  \n103      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n104      {\n105          fooxx(request, response);\n106      }\n107  \n108      \n109      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n110      {\n111          String data;\n112  \n113          \n114          data = \"foo\";\n115  \n116          CWE80_XSS__CWE182_Servlet_database_54b_fooxxSink(data , request, response);\n117      }\n118  \n119      \n120  \n121  \n122  \n123  \n124      public static void main(String[] args) throws ClassNotFoundException,\n125             InstantiationException, IllegalAccessException\n126      {\n127          mainFromParent(args);\n128      }\n129      public void CWE80_XSS__CWE182_Servlet_database_54b_hooSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n130      {\n131          CWE80_XSS__CWE182_Servlet_database_54c_hooSink(data , request, response);\n132      }\n133      \n134      public void CWE80_XSS__CWE182_Servlet_database_54b_fooxxSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n135      {\n136          CWE80_XSS__CWE182_Servlet_database_54c_fooxxSink(data , request, response);\n137      }\n138      public void CWE80_XSS__CWE182_Servlet_database_54c_hooSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n139      {\n140          CWE80_XSS__CWE182_Servlet_database_54d_hooSink(data , request, response);\n141      }\n142      \n143      public void CWE80_XSS__CWE182_Servlet_database_54c_fooxxSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n144      {\n145          CWE80_XSS__CWE182_Servlet_database_54d_fooxxSink(data , request, response);\n146      }\n147      public void CWE80_XSS__CWE182_Servlet_database_54d_hooSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n148      {\n149          CWE80_XSS__CWE182_Servlet_database_54e_hooSink(data , request, response);\n150      }\n151      \n152      public void CWE80_XSS__CWE182_Servlet_database_54d_fooxxSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n153      {\n154          CWE80_XSS__CWE182_Servlet_database_54e_fooxxSink(data , request, response);\n155      }\n156      public void CWE80_XSS__CWE182_Servlet_database_54e_hooSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n157      {\n158          if (data != null)\n159          {\n160              \n161              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n162          }\n163      }\n164      \n165      public void CWE80_XSS__CWE182_Servlet_database_54e_fooxxSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n166      {\n167          if (data != null)\n168          {\n169              \n170              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n171          }\n172      }\n173  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    53,
                    "data"
                ],
                [
                    161,
                    "data.replaceAll(\"(<script>)\", \"\")"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}