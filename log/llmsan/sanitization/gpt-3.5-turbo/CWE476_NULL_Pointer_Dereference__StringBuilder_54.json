{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__StringBuilder_54a.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-54a.tmpl.java\n*/\n/*\n * @description\n * CWE: 476 Null Pointer Dereference\n * BadSource:  Set data to null\n * GoodSource: Set data to a non-null value\n * Sinks:\n *    GoodSink: add check to prevent possibility of null dereference\n *    BadSink : possibility of null dereference\n * Flow Variant: 54 Data flow: data passed as an argument from one method through three others to a fifth; all five functions are in different classes in the same package\n *\n * */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__StringBuilder_54a extends AbstractTestCase\n{\n    public void bad() throws Throwable\n    {\n        StringBuilder data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54b_badSink(data );\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B();\n        goodB2G();\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B() throws Throwable\n    {\n        StringBuilder data;\n\n        /* FIX: hardcode data to non-null */\n        data = new StringBuilder();\n\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54b_goodG2BSink(data );\n    }\n\n    /* goodB2G() - use badsource and goodsink */\n    private void goodB2G() throws Throwable\n    {\n        StringBuilder data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54b_goodB2GSink(data );\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54d_badSink(StringBuilder data ) throws Throwable\n    {\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54e_badSink(data );\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54d_goodG2BSink(StringBuilder data ) throws Throwable\n    {\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54e_goodG2BSink(data );\n    }\n    /* goodB2G() - use badsource and goodsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54d_goodB2GSink(StringBuilder data ) throws Throwable\n    {\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54e_goodB2GSink(data );\n    }\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54e_badSink(StringBuilder data ) throws Throwable\n    {\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.length());\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54e_goodG2BSink(StringBuilder data ) throws Throwable\n    {\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.length());\n    }\n    /* goodB2G() - use badsource and goodsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54e_goodB2GSink(StringBuilder data ) throws Throwable\n    {\n        /* FIX: validate that data is non-null */\n        if (data != null)\n        {\n            IO.writeLine(\"\" + data.length());\n        }\n        else\n        {\n            IO.writeLine(\"data is null\");\n        }\n    }\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54b_badSink(StringBuilder data ) throws Throwable\n    {\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54c_badSink(data );\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54b_goodG2BSink(StringBuilder data ) throws Throwable\n    {\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54c_goodG2BSink(data );\n    }\n    /* goodB2G() - use badsource and goodsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54b_goodB2GSink(StringBuilder data ) throws Throwable\n    {\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54c_goodB2GSink(data );\n    }\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54c_badSink(StringBuilder data ) throws Throwable\n    {\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54d_badSink(data );\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54c_goodG2BSink(StringBuilder data ) throws Throwable\n    {\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54d_goodG2BSink(data );\n    }\n    /* goodB2G() - use badsource and goodsink */\n    public void CWE476_NULL_Pointer_Dereference__StringBuilder_54c_goodB2GSink(StringBuilder data ) throws Throwable\n    {\n        CWE476_NULL_Pointer_Dereference__StringBuilder_54d_goodB2GSink(data );\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__StringBuilder_54a extends AbstractTestCase\n23  {\n24      public void hoo() throws Throwable\n25      {\n26          StringBuilder data;\n27  \n28          \n29          data = null;\n30  \n31          CWE476_NULL_Pointer_Dereference__StringBuilder_54b_hooSink(data );\n32      }\n33  \n34      public void foo() throws Throwable\n35      {\n36          fooxx();\n37          fooyy();\n38      }\n39  \n40      \n41      private void fooxx() throws Throwable\n42      {\n43          StringBuilder data;\n44  \n45          \n46          data = new StringBuilder();\n47  \n48          CWE476_NULL_Pointer_Dereference__StringBuilder_54b_fooxxSink(data );\n49      }\n50  \n51      \n52      private void fooyy() throws Throwable\n53      {\n54          StringBuilder data;\n55  \n56          \n57          data = null;\n58  \n59          CWE476_NULL_Pointer_Dereference__StringBuilder_54b_fooyySink(data );\n60      }\n61  \n62      \n63  \n64  \n65  \n66  \n67      public static void main(String[] args) throws ClassNotFoundException,\n68             InstantiationException, IllegalAccessException\n69      {\n70          mainFromParent(args);\n71      }\n72      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54d_hooSink(StringBuilder data ) throws Throwable\n73      {\n74          CWE476_NULL_Pointer_Dereference__StringBuilder_54e_hooSink(data );\n75      }\n76      \n77      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54d_fooxxSink(StringBuilder data ) throws Throwable\n78      {\n79          CWE476_NULL_Pointer_Dereference__StringBuilder_54e_fooxxSink(data );\n80      }\n81      \n82      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54d_fooyySink(StringBuilder data ) throws Throwable\n83      {\n84          CWE476_NULL_Pointer_Dereference__StringBuilder_54e_fooyySink(data );\n85      }\n86      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54e_hooSink(StringBuilder data ) throws Throwable\n87      {\n88          \n89          IO.writeLine(\"\" + data.length());\n90      }\n91      \n92      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54e_fooxxSink(StringBuilder data ) throws Throwable\n93      {\n94          \n95          IO.writeLine(\"\" + data.length());\n96      }\n97      \n98      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54e_fooyySink(StringBuilder data ) throws Throwable\n99      {\n100          \n101          if (data != null)\n102          {\n103              IO.writeLine(\"\" + data.length());\n104          }\n105          else\n106          {\n107              IO.writeLine(\"data is null\");\n108          }\n109      }\n110      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54b_hooSink(StringBuilder data ) throws Throwable\n111      {\n112          CWE476_NULL_Pointer_Dereference__StringBuilder_54c_hooSink(data );\n113      }\n114      \n115      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54b_fooxxSink(StringBuilder data ) throws Throwable\n116      {\n117          CWE476_NULL_Pointer_Dereference__StringBuilder_54c_fooxxSink(data );\n118      }\n119      \n120      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54b_fooyySink(StringBuilder data ) throws Throwable\n121      {\n122          CWE476_NULL_Pointer_Dereference__StringBuilder_54c_fooyySink(data );\n123      }\n124      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54c_hooSink(StringBuilder data ) throws Throwable\n125      {\n126          CWE476_NULL_Pointer_Dereference__StringBuilder_54d_hooSink(data );\n127      }\n128      \n129      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54c_fooxxSink(StringBuilder data ) throws Throwable\n130      {\n131          CWE476_NULL_Pointer_Dereference__StringBuilder_54d_fooxxSink(data );\n132      }\n133      \n134      public void CWE476_NULL_Pointer_Dereference__StringBuilder_54c_fooyySink(StringBuilder data ) throws Throwable\n135      {\n136          CWE476_NULL_Pointer_Dereference__StringBuilder_54d_fooyySink(data );\n137      }\n138  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    29,
                    "data"
                ],
                [
                    31,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    57,
                    "data"
                ],
                [
                    59,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        },
        {
            "trace": [
                [
                    57,
                    "data"
                ],
                [
                    135,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}