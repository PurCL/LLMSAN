{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_database_12.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-12.tmpl.java\n*/\n/*\n* @description\n* CWE: 80 Cross Site Scripting (XSS)\n* BadSource: database Read data from a database\n* GoodSource: A hardcoded string\n* BadSink:  Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n* Flow Variant: 12 Control flow: if(IO.staticReturnsTrueOrFalse())\n*\n* */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_database_12 extends AbstractTestCaseServlet\n{\n    /* uses badsource and badsink - see how tools report flaws that don't always occur */\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (IO.staticReturnsTrueOrFalse())\n        {\n            data = \"\"; /* Initialize data */\n            /* Read data from a database */\n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try\n                {\n                    /* setup the connection */\n                    connection = IO.getDBConnection();\n                    /* prepare and execute a (hardcoded) query */\n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    /* POTENTIAL FLAW: Read data from a database query resultset */\n                    data = resultSet.getString(1);\n                }\n                catch (SQLException exceptSql)\n                {\n                    IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n                }\n                finally\n                {\n                    /* Close database objects */\n                    try\n                    {\n                        if (resultSet != null)\n                        {\n                            resultSet.close();\n                        }\n                    }\n                    catch (SQLException exceptSql)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n                    }\n\n                    try\n                    {\n                        if (preparedStatement != null)\n                        {\n                            preparedStatement.close();\n                        }\n                    }\n                    catch (SQLException exceptSql)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n                    }\n\n                    try\n                    {\n                        if (connection != null)\n                        {\n                            connection.close();\n                        }\n                    }\n                    catch (SQLException exceptSql)\n                    {\n                        IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n                    }\n                }\n            }\n        }\n        else\n        {\n\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    /* goodG2B() - use goodsource and badsink by changing the \"if\" so that\n     * both branches use the GoodSource */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n        if (IO.staticReturnsTrueOrFalse())\n        {\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n        }\n        else\n        {\n\n            /* FIX: Use a hardcoded string */\n            data = \"foo\";\n\n        }\n\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s01;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.sql.Connection;\n22  import java.sql.PreparedStatement;\n23  import java.sql.ResultSet;\n24  import java.sql.SQLException;\n25  \n26  import java.util.logging.Level;\n27  \n28  public class CWE80_XSS__CWE182_Servlet_database_12 extends AbstractTestCaseServlet\n29  {\n30      \n31      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n32      {\n33          String data;\n34          if (IO.staticReturnsTrueOrFalse())\n35          {\n36              data = \"\"; \n37              \n38              {\n39                  Connection connection = null;\n40                  PreparedStatement preparedStatement = null;\n41                  ResultSet resultSet = null;\n42                  try\n43                  {\n44                      \n45                      connection = IO.getDBConnection();\n46                      \n47                      preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n48                      resultSet = preparedStatement.executeQuery();\n49                      \n50                      data = resultSet.getString(1);\n51                  }\n52                  catch (SQLException exceptSql)\n53                  {\n54                      IO.logger.log(Level.WARNING, \"Error with SQL statement\", exceptSql);\n55                  }\n56                  finally\n57                  {\n58                      \n59                      try\n60                      {\n61                          if (resultSet != null)\n62                          {\n63                              resultSet.close();\n64                          }\n65                      }\n66                      catch (SQLException exceptSql)\n67                      {\n68                          IO.logger.log(Level.WARNING, \"Error closing ResultSet\", exceptSql);\n69                      }\n70  \n71                      try\n72                      {\n73                          if (preparedStatement != null)\n74                          {\n75                              preparedStatement.close();\n76                          }\n77                      }\n78                      catch (SQLException exceptSql)\n79                      {\n80                          IO.logger.log(Level.WARNING, \"Error closing PreparedStatement\", exceptSql);\n81                      }\n82  \n83                      try\n84                      {\n85                          if (connection != null)\n86                          {\n87                              connection.close();\n88                          }\n89                      }\n90                      catch (SQLException exceptSql)\n91                      {\n92                          IO.logger.log(Level.WARNING, \"Error closing Connection\", exceptSql);\n93                      }\n94                  }\n95              }\n96          }\n97          else\n98          {\n99  \n100              \n101              data = \"foo\";\n102  \n103          }\n104  \n105          if (data != null)\n106          {\n107              \n108              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n109          }\n110  \n111      }\n112  \n113      \n114  \n115      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n116      {\n117          String data;\n118          if (IO.staticReturnsTrueOrFalse())\n119          {\n120              \n121              data = \"foo\";\n122          }\n123          else\n124          {\n125  \n126              \n127              data = \"foo\";\n128  \n129          }\n130  \n131          if (data != null)\n132          {\n133              \n134              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n135          }\n136  \n137      }\n138  \n139      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n140      {\n141          fooxx(request, response);\n142      }\n143  \n144      \n145  \n146  \n147  \n148  \n149      public static void main(String[] args) throws ClassNotFoundException,\n150             InstantiationException, IllegalAccessException\n151      {\n152          mainFromParent(args);\n153      }\n154  }\n155  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    50,
                    "data"
                ],
                [
                    108,
                    "data.replaceAll(\"(<script>)\", \"\")"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 1
            }
        }
    ]
}