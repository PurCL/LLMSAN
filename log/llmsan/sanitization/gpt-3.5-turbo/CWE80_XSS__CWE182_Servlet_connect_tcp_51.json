{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE80_XSS__CWE182_Servlet_connect_tcp_51a.java\nLabel Definition File: CWE80_XSS__CWE182_Servlet.label.xml\nTemplate File: sources-sink-51a.tmpl.java\n*/\n/*\n * @description\n * CWE: 80 Cross Site Scripting (XSS)\n * BadSource: connect_tcp Read data using an outbound tcp connection\n * GoodSource: A hardcoded string\n * BadSink:  Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS (CWE 182: Collapse of Data into Unsafe Value)\n * Flow Variant: 51 Data flow: data passed as an argument from one function to another in different classes in the same package\n *\n * */\n\npackage testcases.CWE80_XSS.s01;\nimport testcasesupport.*;\n\nimport javax.servlet.http.*;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\n\nimport java.util.logging.Level;\n\npublic class CWE80_XSS__CWE182_Servlet_connect_tcp_51a extends AbstractTestCaseServlet\n{\n    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        data = \"\"; /* Initialize data */\n\n        /* Read data using an outbound tcp connection */\n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n\n            try\n            {\n                /* Read data using an outbound tcp connection */\n                socket = new Socket(\"host.example.org\", 39544);\n\n                /* read input from socket */\n\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n\n                /* POTENTIAL FLAW: Read data using an outbound tcp connection */\n                data = readerBuffered.readLine();\n            }\n            catch (IOException exceptIO)\n            {\n                IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n            }\n            finally\n            {\n                /* clean up stream reading objects */\n                try\n                {\n                    if (readerBuffered != null)\n                    {\n                        readerBuffered.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n                }\n\n                try\n                {\n                    if (readerInputStream != null)\n                    {\n                        readerInputStream.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n                }\n\n                /* clean up socket objects */\n                try\n                {\n                    if (socket != null)\n                    {\n                        socket.close();\n                    }\n                }\n                catch (IOException exceptIO)\n                {\n                    IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n                }\n            }\n        }\n\n        CWE80_XSS__CWE182_Servlet_connect_tcp_51b_badSink(data , request, response );\n    }\n\n    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        goodG2B(request, response);\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        String data;\n\n        /* FIX: Use a hardcoded string */\n        data = \"foo\";\n\n        CWE80_XSS__CWE182_Servlet_connect_tcp_51b_goodG2BSink(data , request, response );\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n\n    public void CWE80_XSS__CWE182_Servlet_connect_tcp_51b_badSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n    }\n    /* goodG2B() - use goodsource and badsink */\n    public void CWE80_XSS__CWE182_Servlet_connect_tcp_51b_goodG2BSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n    {\n        if (data != null)\n        {\n            /* POTENTIAL FLAW: Display of data in web page after using replaceAll() to remove script tags, which will still allow XSS with strings like <scr<script>ipt> (CWE 182: Collapse of Data into Unsafe Value) */\n            response.getWriter().println(\"<br>bad(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n        }\n    }\n}",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  package testcases.CWE80_XSS.s01;\n17  import testcasesupport.*;\n18  \n19  import javax.servlet.http.*;\n20  \n21  import java.io.BufferedReader;\n22  import java.io.InputStreamReader;\n23  import java.io.IOException;\n24  import java.net.Socket;\n25  \n26  import java.util.logging.Level;\n27  \n28  public class CWE80_XSS__CWE182_Servlet_connect_tcp_51a extends AbstractTestCaseServlet\n29  {\n30      public void hoo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n31      {\n32          String data;\n33  \n34          data = \"\"; \n35  \n36          \n37          {\n38              Socket socket = null;\n39              BufferedReader readerBuffered = null;\n40              InputStreamReader readerInputStream = null;\n41  \n42              try\n43              {\n44                  \n45                  socket = new Socket(\"host.example.org\", 39544);\n46  \n47                  \n48  \n49                  readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n50                  readerBuffered = new BufferedReader(readerInputStream);\n51  \n52                  \n53                  data = readerBuffered.readLine();\n54              }\n55              catch (IOException exceptIO)\n56              {\n57                  IO.logger.log(Level.WARNING, \"Error with stream reading\", exceptIO);\n58              }\n59              finally\n60              {\n61                  \n62                  try\n63                  {\n64                      if (readerBuffered != null)\n65                      {\n66                          readerBuffered.close();\n67                      }\n68                  }\n69                  catch (IOException exceptIO)\n70                  {\n71                      IO.logger.log(Level.WARNING, \"Error closing BufferedReader\", exceptIO);\n72                  }\n73  \n74                  try\n75                  {\n76                      if (readerInputStream != null)\n77                      {\n78                          readerInputStream.close();\n79                      }\n80                  }\n81                  catch (IOException exceptIO)\n82                  {\n83                      IO.logger.log(Level.WARNING, \"Error closing InputStreamReader\", exceptIO);\n84                  }\n85  \n86                  \n87                  try\n88                  {\n89                      if (socket != null)\n90                      {\n91                          socket.close();\n92                      }\n93                  }\n94                  catch (IOException exceptIO)\n95                  {\n96                      IO.logger.log(Level.WARNING, \"Error closing Socket\", exceptIO);\n97                  }\n98              }\n99          }\n100  \n101          CWE80_XSS__CWE182_Servlet_connect_tcp_51b_hooSink(data , request, response );\n102      }\n103  \n104      public void foo(HttpServletRequest request, HttpServletResponse response) throws Throwable\n105      {\n106          fooxx(request, response);\n107      }\n108  \n109      \n110      private void fooxx(HttpServletRequest request, HttpServletResponse response) throws Throwable\n111      {\n112          String data;\n113  \n114          \n115          data = \"foo\";\n116  \n117          CWE80_XSS__CWE182_Servlet_connect_tcp_51b_fooxxSink(data , request, response );\n118      }\n119  \n120      \n121  \n122  \n123  \n124  \n125      public static void main(String[] args) throws ClassNotFoundException,\n126             InstantiationException, IllegalAccessException\n127      {\n128          mainFromParent(args);\n129      }\n130  \n131      public void CWE80_XSS__CWE182_Servlet_connect_tcp_51b_hooSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n132      {\n133          if (data != null)\n134          {\n135              \n136              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n137          }\n138      }\n139      \n140      public void CWE80_XSS__CWE182_Servlet_connect_tcp_51b_fooxxSink(String data , HttpServletRequest request, HttpServletResponse response) throws Throwable\n141      {\n142          if (data != null)\n143          {\n144              \n145              response.getWriter().println(\"<br>hoo(): data = \" + data.replaceAll(\"(<script>)\", \"\"));\n146          }\n147      }\n148  }",
    "trace_check_results": [
        {
            "trace": [
                [
                    53,
                    "data"
                ],
                [
                    101,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 1,
                "total": 1,
                "final": 0
            }
        }
    ]
}