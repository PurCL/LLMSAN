{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__StringBuilder_11.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-11.tmpl.java\n*/\n/*\n* @description\n* CWE: 476 Null Pointer Dereference\n* BadSource:  Set data to null\n* GoodSource: Set data to a non-null value\n* Sinks:\n*    GoodSink: add check to prevent possibility of null dereference\n*    BadSink : possibility of null dereference\n* Flow Variant: 11 Control flow: if(IO.staticReturnsTrue()) and if(IO.staticReturnsFalse())\n*\n* */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__StringBuilder_11 extends AbstractTestCase\n{\n    public void bad() throws Throwable\n    {\n        StringBuilder data;\n        if (IO.staticReturnsTrue())\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if(IO.staticReturnsTrue())\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.length());\n        }\n    }\n\n    /* goodG2B1() - use goodsource and badsink by changing first IO.staticReturnsTrue() to IO.staticReturnsFalse() */\n    private void goodG2B1() throws Throwable\n    {\n        StringBuilder data;\n        if (IO.staticReturnsFalse())\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n        else\n        {\n\n            /* FIX: hardcode data to non-null */\n            data = new StringBuilder();\n\n        }\n\n        if (IO.staticReturnsTrue())\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.length());\n        }\n    }\n\n    /* goodG2B2() - use goodsource and badsink by reversing statements in first if */\n    private void goodG2B2() throws Throwable\n    {\n        StringBuilder data;\n\n        if (IO.staticReturnsTrue())\n        {\n            /* FIX: hardcode data to non-null */\n            data = new StringBuilder();\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (IO.staticReturnsTrue())\n        {\n            /* POTENTIAL FLAW: null dereference will occur if data is null */\n            IO.writeLine(\"\" + data.length());\n        }\n    }\n\n    /* goodB2G1() - use badsource and goodsink by changing second IO.staticReturnsTrue() to IO.staticReturnsFalse() */\n    private void goodB2G1() throws Throwable\n    {\n        StringBuilder data;\n        if (IO.staticReturnsTrue())\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (IO.staticReturnsFalse())\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n            IO.writeLine(\"Benign, fixed string\");\n        }\n        else\n        {\n\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.length());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n\n        }\n    }\n\n    /* goodB2G2() - use badsource and goodsink by reversing statements in second if  */\n    private void goodB2G2() throws Throwable\n    {\n        StringBuilder data;\n        if (IO.staticReturnsTrue())\n        {\n            /* POTENTIAL FLAW: data is null */\n            data = null;\n        }\n        else\n        {\n            /* INCIDENTAL: CWE 561 Dead Code, the code below will never run\n             * but ensure data is inititialized before the Sink to avoid compiler errors */\n            data = null;\n        }\n\n        if (IO.staticReturnsTrue())\n        {\n            /* FIX: validate that data is non-null */\n            if (data != null)\n            {\n                IO.writeLine(\"\" + data.length());\n            }\n            else\n            {\n                IO.writeLine(\"data is null\");\n            }\n        }\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B1();\n        goodG2B2();\n        goodB2G1();\n        goodB2G2();\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__StringBuilder_11 extends AbstractTestCase\n23  {\n24      public void hoo() throws Throwable\n25      {\n26          StringBuilder data;\n27          if (IO.staticReturnsTrue())\n28          {\n29              \n30              data = null;\n31          }\n32          else\n33          {\n34              \n35  \n36              data = null;\n37          }\n38  \n39          if(IO.staticReturnsTrue())\n40          {\n41              \n42              IO.writeLine(\"\" + data.length());\n43          }\n44      }\n45  \n46      \n47      private void fooxx1() throws Throwable\n48      {\n49          StringBuilder data;\n50          if (IO.staticReturnsFalse())\n51          {\n52              \n53  \n54              data = null;\n55          }\n56          else\n57          {\n58  \n59              \n60              data = new StringBuilder();\n61  \n62          }\n63  \n64          if (IO.staticReturnsTrue())\n65          {\n66              \n67              IO.writeLine(\"\" + data.length());\n68          }\n69      }\n70  \n71      \n72      private void fooxx2() throws Throwable\n73      {\n74          StringBuilder data;\n75  \n76          if (IO.staticReturnsTrue())\n77          {\n78              \n79              data = new StringBuilder();\n80          }\n81          else\n82          {\n83              \n84  \n85              data = null;\n86          }\n87  \n88          if (IO.staticReturnsTrue())\n89          {\n90              \n91              IO.writeLine(\"\" + data.length());\n92          }\n93      }\n94  \n95      \n96      private void fooyy1() throws Throwable\n97      {\n98          StringBuilder data;\n99          if (IO.staticReturnsTrue())\n100          {\n101              \n102              data = null;\n103          }\n104          else\n105          {\n106              \n107  \n108              data = null;\n109          }\n110  \n111          if (IO.staticReturnsFalse())\n112          {\n113              \n114              IO.writeLine(\"Benign, fixed string\");\n115          }\n116          else\n117          {\n118  \n119              \n120              if (data != null)\n121              {\n122                  IO.writeLine(\"\" + data.length());\n123              }\n124              else\n125              {\n126                  IO.writeLine(\"data is null\");\n127              }\n128  \n129          }\n130      }\n131  \n132      \n133      private void fooyy2() throws Throwable\n134      {\n135          StringBuilder data;\n136          if (IO.staticReturnsTrue())\n137          {\n138              \n139              data = null;\n140          }\n141          else\n142          {\n143              \n144  \n145              data = null;\n146          }\n147  \n148          if (IO.staticReturnsTrue())\n149          {\n150              \n151              if (data != null)\n152              {\n153                  IO.writeLine(\"\" + data.length());\n154              }\n155              else\n156              {\n157                  IO.writeLine(\"data is null\");\n158              }\n159          }\n160      }\n161  \n162      public void foo() throws Throwable\n163      {\n164          fooxx1();\n165          fooxx2();\n166          fooyy1();\n167          fooyy2();\n168      }\n169  \n170      \n171  \n172  \n173  \n174  \n175      public static void main(String[] args) throws ClassNotFoundException,\n176             InstantiationException, IllegalAccessException\n177      {\n178          mainFromParent(args);\n179      }\n180  }\n181  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    26,
                    "data"
                ],
                [
                    27,
                    "data"
                ],
                [
                    42,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 1,
                "order_sanitize": 1,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    54,
                    "data"
                ],
                [
                    50,
                    "data"
                ],
                [
                    67,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 0,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    85,
                    "data"
                ],
                [
                    76,
                    "data"
                ],
                [
                    91,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 1,
                "order_sanitize": 0,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        },
        {
            "trace": [
                [
                    139,
                    "data"
                ],
                [
                    136,
                    "data"
                ],
                [
                    153,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 1,
                "functionality_sanitize": 0,
                "order_sanitize": 0,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        }
    ]
}