{
    "original code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE476_NULL_Pointer_Dereference__Integer_45.java\nLabel Definition File: CWE476_NULL_Pointer_Dereference.label.xml\nTemplate File: sources-sinks-45.tmpl.java\n*/\n/*\n * @description\n * CWE: 476 Null Pointer Dereference\n * BadSource:  Set data to null\n * GoodSource: Set data to a non-null value\n * Sinks:\n *    GoodSink: add check to prevent possibility of null dereference\n *    BadSink : possibility of null dereference\n * Flow Variant: 45 Data flow: data passed as a private class member variable from one function to another in the same class\n *\n * */\n\npackage testcases.CWE476_NULL_Pointer_Dereference;\n\nimport testcasesupport.*;\n\npublic class CWE476_NULL_Pointer_Dereference__Integer_45 extends AbstractTestCase\n{\n    private Integer dataBad;\n    private Integer dataGoodG2B;\n    private Integer dataGoodB2G;\n\n    private void badSink() throws Throwable\n    {\n        Integer data = dataBad;\n\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.toString());\n\n    }\n\n    public void bad() throws Throwable\n    {\n        Integer data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        dataBad = data;\n        badSink();\n    }\n\n    public void good() throws Throwable\n    {\n        goodG2B();\n        goodB2G();\n    }\n\n    private void goodG2BSink() throws Throwable\n    {\n        Integer data = dataGoodG2B;\n\n        /* POTENTIAL FLAW: null dereference will occur if data is null */\n        IO.writeLine(\"\" + data.toString());\n\n    }\n\n    /* goodG2B() - use goodsource and badsink */\n    private void goodG2B() throws Throwable\n    {\n        Integer data;\n\n        /* FIX: hardcode data to non-null */\n        data = Integer.valueOf(5);\n\n        dataGoodG2B = data;\n        goodG2BSink();\n    }\n\n    private void goodB2GSink() throws Throwable\n    {\n        Integer data = dataGoodB2G;\n\n        /* FIX: validate that data is non-null */\n        if (data != null)\n        {\n            IO.writeLine(\"\" + data.toString());\n        }\n        else\n        {\n            IO.writeLine(\"data is null\");\n        }\n\n    }\n\n    /* goodB2G() - use badsource and goodsink */\n    private void goodB2G() throws Throwable\n    {\n        Integer data;\n\n        /* POTENTIAL FLAW: data is null */\n        data = null;\n\n        dataGoodB2G = data;\n        goodB2GSink();\n    }\n\n    /* Below is the main(). It is only used when building this testcase on\n     * its own for testing or for building a binary to use in testing binary\n     * analysis tools. It is not used when compiling all the testcases as one\n     * application, which is how source code analysis tools are tested.\n     */\n    public static void main(String[] args) throws ClassNotFoundException,\n           InstantiationException, IllegalAccessException\n    {\n        mainFromParent(args);\n    }\n}\n",
    "analyzed code": "1  \n2  \n3  \n4  \n5  \n6  \n7  \n8  \n9  \n10  \n11  \n12  \n13  \n14  \n15  \n16  \n17  \n18  package testcases.CWE476_NULL_Pointer_Dereference;\n19  \n20  import testcasesupport.*;\n21  \n22  public class CWE476_NULL_Pointer_Dereference__Integer_45 extends AbstractTestCase\n23  {\n24      private Integer dataBad;\n25      private Integer dataGoodxx;\n26      private Integer dataGoodyy;\n27  \n28      private void hooSink() throws Throwable\n29      {\n30          Integer data = dataBad;\n31  \n32          \n33          IO.writeLine(\"\" + data.toString());\n34  \n35      }\n36  \n37      public void hoo() throws Throwable\n38      {\n39          Integer data;\n40  \n41          \n42          data = null;\n43  \n44          dataBad = data;\n45          hooSink();\n46      }\n47  \n48      public void foo() throws Throwable\n49      {\n50          fooxx();\n51          fooyy();\n52      }\n53  \n54      private void fooxxSink() throws Throwable\n55      {\n56          Integer data = dataGoodxx;\n57  \n58          \n59          IO.writeLine(\"\" + data.toString());\n60  \n61      }\n62  \n63      \n64      private void fooxx() throws Throwable\n65      {\n66          Integer data;\n67  \n68          \n69          data = Integer.valueOf(5);\n70  \n71          dataGoodxx = data;\n72          fooxxSink();\n73      }\n74  \n75      private void fooyySink() throws Throwable\n76      {\n77          Integer data = dataGoodyy;\n78  \n79          \n80          if (data != null)\n81          {\n82              IO.writeLine(\"\" + data.toString());\n83          }\n84          else\n85          {\n86              IO.writeLine(\"data is null\");\n87          }\n88  \n89      }\n90  \n91      \n92      private void fooyy() throws Throwable\n93      {\n94          Integer data;\n95  \n96          \n97          data = null;\n98  \n99          dataGoodyy = data;\n100          fooyySink();\n101      }\n102  \n103      \n104  \n105  \n106  \n107  \n108      public static void main(String[] args) throws ClassNotFoundException,\n109             InstantiationException, IllegalAccessException\n110      {\n111          mainFromParent(args);\n112      }\n113  }\n114  ",
    "trace_check_results": [
        {
            "trace": [
                [
                    30,
                    "data"
                ],
                [
                    33,
                    "data"
                ]
            ],
            "result": {
                "type_sanitize": 0,
                "functionality_sanitize": 0,
                "order_sanitize": 1,
                "reachability_sanitize": 0,
                "total": 1,
                "final": 0
            }
        }
    ]
}